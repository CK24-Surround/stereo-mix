//Generated by TurboLink CodeGenerator, do not edit!
#include "SLobby/LobbyService.h"
#include "SLobby/LobbyClient.h"
#include "LobbyService_Private.h"
#include "LobbyMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

ULobbyService::ULobbyService()
	: d(new ULobbyService::Private())
{
}

ULobbyService::~ULobbyService()
{
	delete d;
}

void ULobbyService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("LobbyService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to LobbyService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel((const char*)StringCast<UTF8CHAR>(*serviceEndPoint).Get(), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = lobby::LobbyService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState ULobbyService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

ULobbyServiceClient* ULobbyService::MakeClient()
{
	auto client = UGrpcService::MakeClient<ULobbyServiceClient>();
	return client;
}

void ULobbyService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void ULobbyService::CallCreateRoom(const FGrpcLobbyCreateRoomRequest& Request, FCreateRoomResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	ULobbyServiceCreateRoomLambdaWrapper* lambdaWrapper = NewObject<ULobbyServiceCreateRoomLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateRoom();
	InnerClient->OnCreateRoomResponse.AddUniqueDynamic(lambdaWrapper, &ULobbyServiceCreateRoomLambdaWrapper::OnResponse);
	InnerClient->CreateRoom(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void ULobbyService::CallJoinRoom(const FGrpcLobbyJoinRoomRequest& Request, FJoinRoomResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	ULobbyServiceJoinRoomLambdaWrapper* lambdaWrapper = NewObject<ULobbyServiceJoinRoomLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitJoinRoom();
	InnerClient->OnJoinRoomResponse.AddUniqueDynamic(lambdaWrapper, &ULobbyServiceJoinRoomLambdaWrapper::OnResponse);
	InnerClient->JoinRoom(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void ULobbyService::CallGetRoomList(const FGrpcLobbyGetRoomListRequest& Request, FGetRoomListResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	ULobbyServiceGetRoomListLambdaWrapper* lambdaWrapper = NewObject<ULobbyServiceGetRoomListLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetRoomList();
	InnerClient->OnGetRoomListResponse.AddUniqueDynamic(lambdaWrapper, &ULobbyServiceGetRoomListLambdaWrapper::OnResponse);
	InnerClient->GetRoomList(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void ULobbyService::CallUpdateRoomInfo(const FGrpcLobbyUpdateRoomInfoRequest& Request, FUpdateRoomInfoResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	ULobbyServiceUpdateRoomInfoLambdaWrapper* lambdaWrapper = NewObject<ULobbyServiceUpdateRoomInfoLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitUpdateRoomInfo();
	InnerClient->OnUpdateRoomInfoResponse.AddUniqueDynamic(lambdaWrapper, &ULobbyServiceUpdateRoomInfoLambdaWrapper::OnResponse);
	InnerClient->UpdateRoomInfo(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}
