//Generated by TurboLink CodeGenerator, do not edit!
#include "LobbyMarshaling.h"

void GRPC_TO_TURBOLINK(const ::lobby::RoomInfo* in, FGrpcLobbyRoomInfo* out)
{
    out->RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
    out->RoomName=StringCast<TCHAR>((const UTF8CHAR*)(in->room_name().c_str())).Get();
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
    out->MaxPlayers=in->max_players();
    out->CurrentPlayers=in->current_players();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyRoomInfo* in, ::lobby::RoomInfo* out)
{
    out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->RoomId)).Get());
    out->set_room_name((const char*)StringCast<UTF8CHAR>(*(in->RoomName)).Get());
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
    out->set_max_players(in->MaxPlayers);
    out->set_current_players(in->CurrentPlayers);
}

void GRPC_TO_TURBOLINK(const ::lobby::CreateRoomRequest* in, FGrpcLobbyCreateRoomRequest* out)
{
    out->RoomName=StringCast<TCHAR>((const UTF8CHAR*)(in->room_name().c_str())).Get();
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Password=StringCast<TCHAR>((const UTF8CHAR*)(in->password().c_str())).Get();
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyCreateRoomRequest* in, ::lobby::CreateRoomRequest* out)
{
    out->set_room_name((const char*)StringCast<UTF8CHAR>(*(in->RoomName)).Get());
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_password((const char*)StringCast<UTF8CHAR>(*(in->Password)).Get());
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
}

void GRPC_TO_TURBOLINK(const ::lobby::JoinRoomRequest* in, FGrpcLobbyJoinRoomRequest* out)
{
    out->RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
    out->Password=StringCast<TCHAR>((const UTF8CHAR*)(in->password().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyJoinRoomRequest* in, ::lobby::JoinRoomRequest* out)
{
    out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->RoomId)).Get());
    out->set_password((const char*)StringCast<UTF8CHAR>(*(in->Password)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::GetRoomListRequest* in, FGrpcLobbyGetRoomListRequest* out)
{
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyGetRoomListRequest* in, ::lobby::GetRoomListRequest* out)
{
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
}

void GRPC_TO_TURBOLINK(const ::lobby::GetRoomListResponse* in, FGrpcLobbyGetRoomListResponse* out)
{
    out->Rooms.Empty();
    for (int i=0; i<in->rooms_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->rooms(i)), &(out->Rooms.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyGetRoomListResponse* in, ::lobby::GetRoomListResponse* out)
{
    for(const auto& value : in->Rooms) {
        TURBOLINK_TO_GRPC(&value, out->add_rooms());
    } 
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomInfoRequest* in, FGrpcLobbyUpdateRoomInfoRequest* out)
{
    out->RoomName=StringCast<TCHAR>((const UTF8CHAR*)(in->room_name().c_str())).Get();
    out->NewPassword=StringCast<TCHAR>((const UTF8CHAR*)(in->new_password().c_str())).Get();
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
    out->CurrentPlayers=in->current_players();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomInfoRequest* in, ::lobby::UpdateRoomInfoRequest* out)
{
    out->set_room_name((const char*)StringCast<UTF8CHAR>(*(in->RoomName)).Get());
    out->set_new_password((const char*)StringCast<UTF8CHAR>(*(in->NewPassword)).Get());
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
    out->set_current_players(in->CurrentPlayers);
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomInfoResponse* in, FGrpcLobbyUpdateRoomInfoResponse* out)
{
    GRPC_TO_TURBOLINK(&(in->updated_room_info()), &(out->UpdatedRoomInfo));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomInfoResponse* in, ::lobby::UpdateRoomInfoResponse* out)
{
    TURBOLINK_TO_GRPC(&(in->UpdatedRoomInfo), out->mutable_updated_room_info());
}

void GRPC_TO_TURBOLINK(const ::lobby::ConnectionInfo* in, FGrpcLobbyConnectionInfo* out)
{
    out->Host=StringCast<TCHAR>((const UTF8CHAR*)(in->host().c_str())).Get();
    out->Port=in->port();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyConnectionInfo* in, ::lobby::ConnectionInfo* out)
{
    out->set_host((const char*)StringCast<UTF8CHAR>(*(in->Host)).Get());
    out->set_port(in->Port);
}

