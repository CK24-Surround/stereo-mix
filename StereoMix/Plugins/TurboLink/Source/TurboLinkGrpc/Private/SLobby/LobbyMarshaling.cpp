//Generated by TurboLink CodeGenerator, do not edit!
#include "LobbyMarshaling.h"

void GRPC_TO_TURBOLINK(const ::lobby::RoomConnectionInfo* in, FGrpcLobbyRoomConnectionInfo* out)
{
    out->Host=StringCast<TCHAR>((const UTF8CHAR*)(in->host().c_str())).Get();
    out->Port=in->port();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyRoomConnectionInfo* in, ::lobby::RoomConnectionInfo* out)
{
    out->set_host((const char*)StringCast<UTF8CHAR>(*(in->Host)).Get());
    out->set_port(in->Port);
}

void GRPC_TO_TURBOLINK(const ::lobby::RoomConfig* in, FGrpcLobbyRoomConfig* out)
{
    out->RoomName=StringCast<TCHAR>((const UTF8CHAR*)(in->room_name().c_str())).Get();
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyRoomConfig* in, ::lobby::RoomConfig* out)
{
    out->set_room_name((const char*)StringCast<UTF8CHAR>(*(in->RoomName)).Get());
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
}

void GRPC_TO_TURBOLINK(const ::lobby::Room* in, FGrpcLobbyRoom* out)
{
    out->RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
    out->ShortRoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->short_room_id().c_str())).Get();
    out->OwnerId=StringCast<TCHAR>((const UTF8CHAR*)(in->owner_id().c_str())).Get();
    GRPC_TO_TURBOLINK(&(in->config()), &(out->Config));
    out->State=StaticCast<EGrpcLobbyRoomState>(in->state());
    out->MaxPlayers=in->max_players();
    out->CurrentPlayers=in->current_players();
    GRPC_TO_TURBOLINK(&(in->connection()), &(out->Connection));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyRoom* in, ::lobby::Room* out)
{
    out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->RoomId)).Get());
    out->set_short_room_id((const char*)StringCast<UTF8CHAR>(*(in->ShortRoomId)).Get());
    out->set_owner_id((const char*)StringCast<UTF8CHAR>(*(in->OwnerId)).Get());
    TURBOLINK_TO_GRPC(&(in->Config), out->mutable_config());
    out->set_state(::lobby::RoomState(static_cast<uint8>(in->State)));
    out->set_max_players(in->MaxPlayers);
    out->set_current_players(in->CurrentPlayers);
    TURBOLINK_TO_GRPC(&(in->Connection), out->mutable_connection());
}

void GRPC_TO_TURBOLINK(const ::lobby::CreateRoomRequest* in, FGrpcLobbyCreateRoomRequest* out)
{
    out->RoomName=StringCast<TCHAR>((const UTF8CHAR*)(in->room_name().c_str())).Get();
    out->Password=StringCast<TCHAR>((const UTF8CHAR*)(in->password().c_str())).Get();
    GRPC_TO_TURBOLINK(&(in->config()), &(out->Config));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyCreateRoomRequest* in, ::lobby::CreateRoomRequest* out)
{
    out->set_room_name((const char*)StringCast<UTF8CHAR>(*(in->RoomName)).Get());
    out->set_password((const char*)StringCast<UTF8CHAR>(*(in->Password)).Get());
    TURBOLINK_TO_GRPC(&(in->Config), out->mutable_config());
}

void GRPC_TO_TURBOLINK(const ::lobby::CreateRoomResponse* in, FGrpcLobbyCreateRoomResponse* out)
{
    out->DeployStatus=StaticCast<EGrpcLobbyRoomDeploymentStatus>(in->deploy_status());
    GRPC_TO_TURBOLINK(&(in->connection()), &(out->Connection));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyCreateRoomResponse* in, ::lobby::CreateRoomResponse* out)
{
    out->set_deploy_status(::lobby::RoomDeploymentStatus(static_cast<uint8>(in->DeployStatus)));
    TURBOLINK_TO_GRPC(&(in->Connection), out->mutable_connection());
}

void GRPC_TO_TURBOLINK(const ::lobby::JoinRoomRequest* in, FGrpcLobbyJoinRoomRequest* out)
{
    switch(in->id_case())
    {
    case ::lobby::JoinRoomRequest::kRoomId:
        out->Id.RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
        out->Id.IdCase = EGrpcLobbyJoinRoomRequestId::RoomId;
        break;
    case ::lobby::JoinRoomRequest::kShortRoomId:
        out->Id.ShortRoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->short_room_id().c_str())).Get();
        out->Id.IdCase = EGrpcLobbyJoinRoomRequestId::ShortRoomId;
        break;
    }
    out->Password=StringCast<TCHAR>((const UTF8CHAR*)(in->password().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyJoinRoomRequest* in, ::lobby::JoinRoomRequest* out)
{
    switch (in->Id.IdCase)
    {
    case EGrpcLobbyJoinRoomRequestId::RoomId:
        out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->Id.RoomId)).Get());
        break;
    case EGrpcLobbyJoinRoomRequestId::ShortRoomId:
        out->set_short_room_id((const char*)StringCast<UTF8CHAR>(*(in->Id.ShortRoomId)).Get());
        break;
    }
    out->set_password((const char*)StringCast<UTF8CHAR>(*(in->Password)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::JoinRoomResponse* in, FGrpcLobbyJoinRoomResponse* out)
{
    GRPC_TO_TURBOLINK(&(in->connection()), &(out->Connection));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyJoinRoomResponse* in, ::lobby::JoinRoomResponse* out)
{
    TURBOLINK_TO_GRPC(&(in->Connection), out->mutable_connection());
}

void GRPC_TO_TURBOLINK(const ::lobby::GetRoomListRequest* in, FGrpcLobbyGetRoomListRequest* out)
{
    out->Visibility=StaticCast<EGrpcLobbyRoomVisibility>(in->visibility());
    out->Mode=StaticCast<EGrpcLobbyGameMode>(in->mode());
    out->Map=StaticCast<EGrpcLobbyGameMap>(in->map());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyGetRoomListRequest* in, ::lobby::GetRoomListRequest* out)
{
    out->set_visibility(::lobby::RoomVisibility(static_cast<uint8>(in->Visibility)));
    out->set_mode(::lobby::GameMode(static_cast<uint8>(in->Mode)));
    out->set_map(::lobby::GameMap(static_cast<uint8>(in->Map)));
}

void GRPC_TO_TURBOLINK(const ::lobby::GetRoomListResponse* in, FGrpcLobbyGetRoomListResponse* out)
{
    out->Rooms.Empty();
    for (int i=0; i<in->rooms_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->rooms(i)), &(out->Rooms.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyGetRoomListResponse* in, ::lobby::GetRoomListResponse* out)
{
    for(const auto& value : in->Rooms) {
        TURBOLINK_TO_GRPC(&value, out->add_rooms());
    } 
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomStateRequest* in, FGrpcLobbyUpdateRoomStateRequest* out)
{
    out->State=StaticCast<EGrpcLobbyRoomState>(in->state());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomStateRequest* in, ::lobby::UpdateRoomStateRequest* out)
{
    out->set_state(::lobby::RoomState(static_cast<uint8>(in->State)));
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomStateResponse* in, FGrpcLobbyUpdateRoomStateResponse* out)
{
    out->UpdatedState=StaticCast<EGrpcLobbyRoomState>(in->updated_state());
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomStateResponse* in, ::lobby::UpdateRoomStateResponse* out)
{
    out->set_updated_state(::lobby::RoomState(static_cast<uint8>(in->UpdatedState)));
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomConfigRequest* in, FGrpcLobbyUpdateRoomConfigRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->config()), &(out->Config));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomConfigRequest* in, ::lobby::UpdateRoomConfigRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Config), out->mutable_config());
}

void GRPC_TO_TURBOLINK(const ::lobby::UpdateRoomConfigResponse* in, FGrpcLobbyUpdateRoomConfigResponse* out)
{
    GRPC_TO_TURBOLINK(&(in->updated_config()), &(out->UpdatedConfig));
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyUpdateRoomConfigResponse* in, ::lobby::UpdateRoomConfigResponse* out)
{
    TURBOLINK_TO_GRPC(&(in->UpdatedConfig), out->mutable_updated_config());
}

void GRPC_TO_TURBOLINK(const ::lobby::ChangeRoomPasswordRequest* in, FGrpcLobbyChangeRoomPasswordRequest* out)
{
    out->Password=StringCast<TCHAR>((const UTF8CHAR*)(in->password().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyChangeRoomPasswordRequest* in, ::lobby::ChangeRoomPasswordRequest* out)
{
    out->set_password((const char*)StringCast<UTF8CHAR>(*(in->Password)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::ChangeRoomPasswordResponse* in, FGrpcLobbyChangeRoomPasswordResponse* out)
{
    out->RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyChangeRoomPasswordResponse* in, ::lobby::ChangeRoomPasswordResponse* out)
{
    out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->RoomId)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::ChangeRoomOwnerRequest* in, FGrpcLobbyChangeRoomOwnerRequest* out)
{
    out->NewOwnerId=StringCast<TCHAR>((const UTF8CHAR*)(in->new_owner_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyChangeRoomOwnerRequest* in, ::lobby::ChangeRoomOwnerRequest* out)
{
    out->set_new_owner_id((const char*)StringCast<UTF8CHAR>(*(in->NewOwnerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::ChangeRoomOwnerResponse* in, FGrpcLobbyChangeRoomOwnerResponse* out)
{
    out->OwnerId=StringCast<TCHAR>((const UTF8CHAR*)(in->owner_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyChangeRoomOwnerResponse* in, ::lobby::ChangeRoomOwnerResponse* out)
{
    out->set_owner_id((const char*)StringCast<UTF8CHAR>(*(in->OwnerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::lobby::DeleteRoomRequest* in, FGrpcLobbyDeleteRoomRequest* out)
{
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyDeleteRoomRequest* in, ::lobby::DeleteRoomRequest* out)
{
}

void GRPC_TO_TURBOLINK(const ::lobby::DeleteRoomResponse* in, FGrpcLobbyDeleteRoomResponse* out)
{
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyDeleteRoomResponse* in, ::lobby::DeleteRoomResponse* out)
{
}

void GRPC_TO_TURBOLINK(const ::lobby::ListenRoomUpdatesRequest* in, FGrpcLobbyListenRoomUpdatesRequest* out)
{
}

void TURBOLINK_TO_GRPC(const FGrpcLobbyListenRoomUpdatesRequest* in, ::lobby::ListenRoomUpdatesRequest* out)
{
}

