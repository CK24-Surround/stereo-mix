//Generated by TurboLink CodeGenerator, do not edit!
#include "SLobby/LobbyNode.h"
#include "SLobby/LobbyService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallLobbyServiceCreateRoom* UCallLobbyServiceCreateRoom::CreateRoom(UObject* WorldContextObject, const FGrpcLobbyCreateRoomRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceCreateRoom* node = NewObject<UCallLobbyServiceCreateRoom>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceCreateRoom::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceCreateRoom::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceCreateRoom::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyConnectionInfo response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceCreateRoom::OnContextStateChange);
		LobbyServiceClient->OnCreateRoomResponse.AddUniqueDynamic(this, &UCallLobbyServiceCreateRoom::OnResponse);

		Context = LobbyServiceClient->InitCreateRoom();
		LobbyServiceClient->CreateRoom(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceCreateRoom::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceCreateRoom::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyConnectionInfo& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateRoomResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceCreateRoom::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceCreateRoom::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceJoinRoom* UCallLobbyServiceJoinRoom::JoinRoom(UObject* WorldContextObject, const FGrpcLobbyJoinRoomRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceJoinRoom* node = NewObject<UCallLobbyServiceJoinRoom>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceJoinRoom::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceJoinRoom::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceJoinRoom::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyConnectionInfo response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoom::OnContextStateChange);
		LobbyServiceClient->OnJoinRoomResponse.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoom::OnResponse);

		Context = LobbyServiceClient->InitJoinRoom();
		LobbyServiceClient->JoinRoom(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceJoinRoom::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceJoinRoom::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyConnectionInfo& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnJoinRoomResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceJoinRoom::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceJoinRoom::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceGetRoomList* UCallLobbyServiceGetRoomList::GetRoomList(UObject* WorldContextObject, const FGrpcLobbyGetRoomListRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceGetRoomList* node = NewObject<UCallLobbyServiceGetRoomList>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceGetRoomList::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceGetRoomList::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceGetRoomList::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyGetRoomListResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceGetRoomList::OnContextStateChange);
		LobbyServiceClient->OnGetRoomListResponse.AddUniqueDynamic(this, &UCallLobbyServiceGetRoomList::OnResponse);

		Context = LobbyServiceClient->InitGetRoomList();
		LobbyServiceClient->GetRoomList(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceGetRoomList::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceGetRoomList::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyGetRoomListResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetRoomListResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceGetRoomList::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceGetRoomList::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceUpdateRoomInfo* UCallLobbyServiceUpdateRoomInfo::UpdateRoomInfo(UObject* WorldContextObject, const FGrpcLobbyUpdateRoomInfoRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceUpdateRoomInfo* node = NewObject<UCallLobbyServiceUpdateRoomInfo>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceUpdateRoomInfo::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceUpdateRoomInfo::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceUpdateRoomInfo::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyUpdateRoomInfoResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomInfo::OnContextStateChange);
		LobbyServiceClient->OnUpdateRoomInfoResponse.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomInfo::OnResponse);

		Context = LobbyServiceClient->InitUpdateRoomInfo();
		LobbyServiceClient->UpdateRoomInfo(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceUpdateRoomInfo::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceUpdateRoomInfo::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyUpdateRoomInfoResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnUpdateRoomInfoResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceUpdateRoomInfo::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceUpdateRoomInfo::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
