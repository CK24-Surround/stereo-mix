//Generated by TurboLink CodeGenerator, do not edit!
#include "SLobby/LobbyNode.h"
#include "SLobby/LobbyService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallLobbyServiceCreateRoom* UCallLobbyServiceCreateRoom::CreateRoom(UObject* WorldContextObject, const FGrpcLobbyCreateRoomRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceCreateRoom* node = NewObject<UCallLobbyServiceCreateRoom>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceCreateRoom::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceCreateRoom::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceCreateRoom::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyCreateRoomResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceCreateRoom::OnContextStateChange);
		LobbyServiceClient->OnCreateRoomResponse.AddUniqueDynamic(this, &UCallLobbyServiceCreateRoom::OnResponse);

		Context = LobbyServiceClient->InitCreateRoom();
		LobbyServiceClient->CreateRoom(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceCreateRoom::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceCreateRoom::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyCreateRoomResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateRoomResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceCreateRoom::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceCreateRoom::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceQuickMatch* UCallLobbyServiceQuickMatch::QuickMatch(UObject* WorldContextObject, const FGrpcLobbyQuickMatchRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceQuickMatch* node = NewObject<UCallLobbyServiceQuickMatch>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceQuickMatch::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceQuickMatch::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceQuickMatch::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyQuickMatchResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceQuickMatch::OnContextStateChange);
		LobbyServiceClient->OnQuickMatchResponse.AddUniqueDynamic(this, &UCallLobbyServiceQuickMatch::OnResponse);

		Context = LobbyServiceClient->InitQuickMatch();
		LobbyServiceClient->QuickMatch(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceQuickMatch::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceQuickMatch::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyQuickMatchResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnQuickMatchResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceQuickMatch::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceQuickMatch::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceJoinRoom* UCallLobbyServiceJoinRoom::JoinRoom(UObject* WorldContextObject, const FGrpcLobbyJoinRoomRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceJoinRoom* node = NewObject<UCallLobbyServiceJoinRoom>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceJoinRoom::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceJoinRoom::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceJoinRoom::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyJoinRoomResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoom::OnContextStateChange);
		LobbyServiceClient->OnJoinRoomResponse.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoom::OnResponse);

		Context = LobbyServiceClient->InitJoinRoom();
		LobbyServiceClient->JoinRoom(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceJoinRoom::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceJoinRoom::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyJoinRoomResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnJoinRoomResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceJoinRoom::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceJoinRoom::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceJoinRoomWithCode* UCallLobbyServiceJoinRoomWithCode::JoinRoomWithCode(UObject* WorldContextObject, const FGrpcLobbyJoinRoomWithCodeRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceJoinRoomWithCode* node = NewObject<UCallLobbyServiceJoinRoomWithCode>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceJoinRoomWithCode::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceJoinRoomWithCode::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceJoinRoomWithCode::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyJoinRoomWithCodeResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoomWithCode::OnContextStateChange);
		LobbyServiceClient->OnJoinRoomWithCodeResponse.AddUniqueDynamic(this, &UCallLobbyServiceJoinRoomWithCode::OnResponse);

		Context = LobbyServiceClient->InitJoinRoomWithCode();
		LobbyServiceClient->JoinRoomWithCode(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceJoinRoomWithCode::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceJoinRoomWithCode::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyJoinRoomWithCodeResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnJoinRoomWithCodeResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceJoinRoomWithCode::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceJoinRoomWithCode::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceGetRoomList* UCallLobbyServiceGetRoomList::GetRoomList(UObject* WorldContextObject, const FGrpcLobbyGetRoomListRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceGetRoomList* node = NewObject<UCallLobbyServiceGetRoomList>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceGetRoomList::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceGetRoomList::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceGetRoomList::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyGetRoomListResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceGetRoomList::OnContextStateChange);
		LobbyServiceClient->OnGetRoomListResponse.AddUniqueDynamic(this, &UCallLobbyServiceGetRoomList::OnResponse);

		Context = LobbyServiceClient->InitGetRoomList();
		LobbyServiceClient->GetRoomList(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceGetRoomList::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceGetRoomList::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyGetRoomListResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetRoomListResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceGetRoomList::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceGetRoomList::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceUpdateRoomState* UCallLobbyServiceUpdateRoomState::UpdateRoomState(UObject* WorldContextObject, const FGrpcLobbyUpdateRoomStateRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceUpdateRoomState* node = NewObject<UCallLobbyServiceUpdateRoomState>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceUpdateRoomState::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceUpdateRoomState::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceUpdateRoomState::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyUpdateRoomStateResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomState::OnContextStateChange);
		LobbyServiceClient->OnUpdateRoomStateResponse.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomState::OnResponse);

		Context = LobbyServiceClient->InitUpdateRoomState();
		LobbyServiceClient->UpdateRoomState(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceUpdateRoomState::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceUpdateRoomState::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyUpdateRoomStateResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnUpdateRoomStateResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceUpdateRoomState::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceUpdateRoomState::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceUpdateRoomConfig* UCallLobbyServiceUpdateRoomConfig::UpdateRoomConfig(UObject* WorldContextObject, const FGrpcLobbyUpdateRoomConfigRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceUpdateRoomConfig* node = NewObject<UCallLobbyServiceUpdateRoomConfig>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceUpdateRoomConfig::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceUpdateRoomConfig::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceUpdateRoomConfig::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyUpdateRoomConfigResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomConfig::OnContextStateChange);
		LobbyServiceClient->OnUpdateRoomConfigResponse.AddUniqueDynamic(this, &UCallLobbyServiceUpdateRoomConfig::OnResponse);

		Context = LobbyServiceClient->InitUpdateRoomConfig();
		LobbyServiceClient->UpdateRoomConfig(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceUpdateRoomConfig::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceUpdateRoomConfig::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyUpdateRoomConfigResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnUpdateRoomConfigResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceUpdateRoomConfig::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceUpdateRoomConfig::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceChangeRoomPassword* UCallLobbyServiceChangeRoomPassword::ChangeRoomPassword(UObject* WorldContextObject, const FGrpcLobbyChangeRoomPasswordRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceChangeRoomPassword* node = NewObject<UCallLobbyServiceChangeRoomPassword>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceChangeRoomPassword::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceChangeRoomPassword::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceChangeRoomPassword::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyChangeRoomPasswordResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceChangeRoomPassword::OnContextStateChange);
		LobbyServiceClient->OnChangeRoomPasswordResponse.AddUniqueDynamic(this, &UCallLobbyServiceChangeRoomPassword::OnResponse);

		Context = LobbyServiceClient->InitChangeRoomPassword();
		LobbyServiceClient->ChangeRoomPassword(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceChangeRoomPassword::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceChangeRoomPassword::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyChangeRoomPasswordResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnChangeRoomPasswordResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceChangeRoomPassword::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceChangeRoomPassword::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceChangeRoomOwner* UCallLobbyServiceChangeRoomOwner::ChangeRoomOwner(UObject* WorldContextObject, const FGrpcLobbyChangeRoomOwnerRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceChangeRoomOwner* node = NewObject<UCallLobbyServiceChangeRoomOwner>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceChangeRoomOwner::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceChangeRoomOwner::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceChangeRoomOwner::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyChangeRoomOwnerResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceChangeRoomOwner::OnContextStateChange);
		LobbyServiceClient->OnChangeRoomOwnerResponse.AddUniqueDynamic(this, &UCallLobbyServiceChangeRoomOwner::OnResponse);

		Context = LobbyServiceClient->InitChangeRoomOwner();
		LobbyServiceClient->ChangeRoomOwner(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceChangeRoomOwner::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceChangeRoomOwner::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyChangeRoomOwnerResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnChangeRoomOwnerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceChangeRoomOwner::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceChangeRoomOwner::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceDeleteRoom* UCallLobbyServiceDeleteRoom::DeleteRoom(UObject* WorldContextObject, const FGrpcLobbyDeleteRoomRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceDeleteRoom* node = NewObject<UCallLobbyServiceDeleteRoom>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceDeleteRoom::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceDeleteRoom::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceDeleteRoom::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyDeleteRoomResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceDeleteRoom::OnContextStateChange);
		LobbyServiceClient->OnDeleteRoomResponse.AddUniqueDynamic(this, &UCallLobbyServiceDeleteRoom::OnResponse);

		Context = LobbyServiceClient->InitDeleteRoom();
		LobbyServiceClient->DeleteRoom(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceDeleteRoom::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallLobbyServiceDeleteRoom::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyDeleteRoomResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteRoomResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceDeleteRoom::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceDeleteRoom::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallLobbyServiceListenRoomUpdates* UCallLobbyServiceListenRoomUpdates::ListenRoomUpdates(UObject* WorldContextObject, const FGrpcLobbyListenRoomUpdatesRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallLobbyServiceListenRoomUpdates* node = NewObject<UCallLobbyServiceListenRoomUpdates>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->LobbyService = Cast<ULobbyService>(turboLinkManager->MakeService("LobbyService"));
	if (node->LobbyService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->LobbyService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallLobbyServiceListenRoomUpdates::OnServiceStateChanged);
	return node;
}

void UCallLobbyServiceListenRoomUpdates::Activate()
{
	LobbyService->Connect();
}

void UCallLobbyServiceListenRoomUpdates::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcLobbyRoom response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		LobbyServiceClient = LobbyService->MakeClient();
		LobbyServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallLobbyServiceListenRoomUpdates::OnContextStateChange);
		LobbyServiceClient->OnListenRoomUpdatesResponse.AddUniqueDynamic(this, &UCallLobbyServiceListenRoomUpdates::OnResponse);

		Context = LobbyServiceClient->InitListenRoomUpdates();
		LobbyServiceClient->ListenRoomUpdates(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallLobbyServiceListenRoomUpdates::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		OnFinished.Broadcast(FGrpcResult{}, FGrpcLobbyRoom{});
		Shutdown();
	}
}

void UCallLobbyServiceListenRoomUpdates::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcLobbyRoom& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnListenRoomUpdatesResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallLobbyServiceListenRoomUpdates::Shutdown()
{
	LobbyService->OnServiceStateChanged.RemoveDynamic(this, &UCallLobbyServiceListenRoomUpdates::OnServiceStateChanged);
	if (LobbyServiceClient != nullptr)
	{
		LobbyService->RemoveClient(LobbyServiceClient);
		LobbyServiceClient->Shutdown();
		LobbyServiceClient = nullptr;
	}

	if (LobbyService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(LobbyService);
		LobbyService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
