//Generated by TurboLink CodeGenerator, do not edit!
#include "LobbyContext.h"
#include "SLobby/LobbyClient.h"
#include "LobbyService_Private.h"
#include "LobbyMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_LobbyService_CreateRoom::GrpcContext_LobbyService_CreateRoom(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_CreateRoom::Call(const FGrpcLobbyCreateRoomRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::CreateRoomRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateRoom(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_CreateRoom::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::ConnectionInfo* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnCreateRoomResponse.IsBound())) return;

			FGrpcLobbyConnectionInfo response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateRoomResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_JoinRoom::GrpcContext_LobbyService_JoinRoom(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_JoinRoom::Call(const FGrpcLobbyJoinRoomRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::JoinRoomRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncJoinRoom(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_JoinRoom::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::ConnectionInfo* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnJoinRoomResponse.IsBound())) return;

			FGrpcLobbyConnectionInfo response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnJoinRoomResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_GetRoomList::GrpcContext_LobbyService_GetRoomList(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_GetRoomList::Call(const FGrpcLobbyGetRoomListRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::GetRoomListRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetRoomList(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_GetRoomList::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::GetRoomListResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnGetRoomListResponse.IsBound())) return;

			FGrpcLobbyGetRoomListResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetRoomListResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_UpdateRoomInfo::GrpcContext_LobbyService_UpdateRoomInfo(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_UpdateRoomInfo::Call(const FGrpcLobbyUpdateRoomInfoRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::UpdateRoomInfoRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateRoomInfo(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_UpdateRoomInfo::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::UpdateRoomInfoResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnUpdateRoomInfoResponse.IsBound())) return;

			FGrpcLobbyUpdateRoomInfoResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnUpdateRoomInfoResponse.Broadcast(Handle, _Result, response);
		}
	);
}
