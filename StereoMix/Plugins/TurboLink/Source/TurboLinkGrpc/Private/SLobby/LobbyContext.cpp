//Generated by TurboLink CodeGenerator, do not edit!
#include "LobbyContext.h"
#include "SLobby/LobbyClient.h"
#include "LobbyService_Private.h"
#include "LobbyMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_LobbyService_CreateRoom::GrpcContext_LobbyService_CreateRoom(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_CreateRoom::Call(const FGrpcLobbyCreateRoomRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::CreateRoomRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateRoom(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_CreateRoom::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::CreateRoomResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnCreateRoomResponse.IsBound())) return;

			FGrpcLobbyCreateRoomResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateRoomResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_QuickMatch::GrpcContext_LobbyService_QuickMatch(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_QuickMatch::Call(const FGrpcLobbyQuickMatchRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::QuickMatchRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncQuickMatch(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_QuickMatch::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::QuickMatchResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnQuickMatchResponse.IsBound())) return;

			FGrpcLobbyQuickMatchResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnQuickMatchResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_JoinRoom::GrpcContext_LobbyService_JoinRoom(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_JoinRoom::Call(const FGrpcLobbyJoinRoomRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::JoinRoomRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncJoinRoom(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_JoinRoom::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::JoinRoomResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnJoinRoomResponse.IsBound())) return;

			FGrpcLobbyJoinRoomResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnJoinRoomResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_JoinRoomWithCode::GrpcContext_LobbyService_JoinRoomWithCode(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_JoinRoomWithCode::Call(const FGrpcLobbyJoinRoomWithCodeRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::JoinRoomWithCodeRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncJoinRoomWithCode(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_JoinRoomWithCode::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::JoinRoomWithCodeResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnJoinRoomWithCodeResponse.IsBound())) return;

			FGrpcLobbyJoinRoomWithCodeResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnJoinRoomWithCodeResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_GetRoomList::GrpcContext_LobbyService_GetRoomList(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_GetRoomList::Call(const FGrpcLobbyGetRoomListRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::GetRoomListRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetRoomList(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_GetRoomList::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::GetRoomListResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnGetRoomListResponse.IsBound())) return;

			FGrpcLobbyGetRoomListResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetRoomListResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_UpdateRoomState::GrpcContext_LobbyService_UpdateRoomState(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_UpdateRoomState::Call(const FGrpcLobbyUpdateRoomStateRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::UpdateRoomStateRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateRoomState(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_UpdateRoomState::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::UpdateRoomStateResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnUpdateRoomStateResponse.IsBound())) return;

			FGrpcLobbyUpdateRoomStateResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnUpdateRoomStateResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_UpdateRoomConfig::GrpcContext_LobbyService_UpdateRoomConfig(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_UpdateRoomConfig::Call(const FGrpcLobbyUpdateRoomConfigRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::UpdateRoomConfigRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateRoomConfig(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_UpdateRoomConfig::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::UpdateRoomConfigResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnUpdateRoomConfigResponse.IsBound())) return;

			FGrpcLobbyUpdateRoomConfigResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnUpdateRoomConfigResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_ChangeRoomPassword::GrpcContext_LobbyService_ChangeRoomPassword(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_ChangeRoomPassword::Call(const FGrpcLobbyChangeRoomPasswordRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::ChangeRoomPasswordRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncChangeRoomPassword(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_ChangeRoomPassword::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::ChangeRoomPasswordResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnChangeRoomPasswordResponse.IsBound())) return;

			FGrpcLobbyChangeRoomPasswordResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnChangeRoomPasswordResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_ChangeRoomOwner::GrpcContext_LobbyService_ChangeRoomOwner(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_ChangeRoomOwner::Call(const FGrpcLobbyChangeRoomOwnerRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::ChangeRoomOwnerRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncChangeRoomOwner(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_ChangeRoomOwner::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::ChangeRoomOwnerResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnChangeRoomOwnerResponse.IsBound())) return;

			FGrpcLobbyChangeRoomOwnerResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnChangeRoomOwnerResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_DeleteRoom::GrpcContext_LobbyService_DeleteRoom(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_DeleteRoom::Call(const FGrpcLobbyDeleteRoomRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::DeleteRoomRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteRoom(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_LobbyService_DeleteRoom::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::DeleteRoomResponse* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnDeleteRoomResponse.IsBound())) return;

			FGrpcLobbyDeleteRoomResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteRoomResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_LobbyService_ListenRoomUpdates::GrpcContext_LobbyService_ListenRoomUpdates(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_LobbyService_ListenRoomUpdates::Call(const FGrpcLobbyListenRoomUpdatesRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::lobby::ListenRoomUpdatesRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	ULobbyService* service = (ULobbyService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncListenRoomUpdates(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_LobbyService_ListenRoomUpdates::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::lobby::Room* _RpcResponse) 
		{
			ULobbyServiceClient* client = (ULobbyServiceClient*)(this->Client);
			if (!(client->OnListenRoomUpdatesResponse.IsBound())) return;

			FGrpcLobbyRoom response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnListenRoomUpdatesResponse.Broadcast(Handle, _Result, response);
		}
	);
}
