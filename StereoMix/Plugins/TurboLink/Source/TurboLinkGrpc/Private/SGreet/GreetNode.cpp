//Generated by TurboLink CodeGenerator, do not edit!
#include "SGreet/GreetNode.h"
#include "SGreet/GreetService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallGreeterServiceSayHello* UCallGreeterServiceSayHello::SayHello(UObject* WorldContextObject, const FGrpcGreetHelloRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallGreeterServiceSayHello* node = NewObject<UCallGreeterServiceSayHello>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->GreeterService = Cast<UGreeterService>(turboLinkManager->MakeService("GreeterService"));
	if (node->GreeterService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->GreeterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallGreeterServiceSayHello::OnServiceStateChanged);
	return node;
}

void UCallGreeterServiceSayHello::Activate()
{
	GreeterService->Connect();
}

void UCallGreeterServiceSayHello::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGreetHelloResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		GreeterServiceClient = GreeterService->MakeClient();
		GreeterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallGreeterServiceSayHello::OnContextStateChange);
		GreeterServiceClient->OnSayHelloResponse.AddUniqueDynamic(this, &UCallGreeterServiceSayHello::OnResponse);

		Context = GreeterServiceClient->InitSayHello();
		GreeterServiceClient->SayHello(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallGreeterServiceSayHello::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallGreeterServiceSayHello::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGreetHelloResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSayHelloResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallGreeterServiceSayHello::Shutdown()
{
	GreeterService->OnServiceStateChanged.RemoveDynamic(this, &UCallGreeterServiceSayHello::OnServiceStateChanged);
	if (GreeterServiceClient != nullptr)
	{
		GreeterService->RemoveClient(GreeterServiceClient);
		GreeterServiceClient->Shutdown();
		GreeterServiceClient = nullptr;
	}

	if (GreeterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(GreeterService);
		GreeterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
