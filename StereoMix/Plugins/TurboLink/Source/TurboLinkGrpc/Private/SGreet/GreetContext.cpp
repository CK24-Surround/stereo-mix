//Generated by TurboLink CodeGenerator, do not edit!
#include "GreetContext.h"
#include "SGreet/GreetClient.h"
#include "GreetService_Private.h"
#include "GreetMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_GreeterService_SayHello::GrpcContext_GreeterService_SayHello(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_GreeterService_SayHello::Call(const FGrpcGreetHelloRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::greet::HelloRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UGreeterService* service = (UGreeterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSayHello(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_GreeterService_SayHello::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::greet::HelloResponse* _RpcResponse) 
		{
			UGreeterServiceClient* client = (UGreeterServiceClient*)(this->Client);
			if (!(client->OnSayHelloResponse.IsBound())) return;

			FGrpcGreetHelloResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSayHelloResponse.Broadcast(Handle, _Result, response);
		}
	);
}
