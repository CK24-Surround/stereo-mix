//Generated by TurboLink CodeGenerator, do not edit!
#include "SGreet/GreetService.h"
#include "SGreet/GreetClient.h"
#include "GreetService_Private.h"
#include "GreetMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UGreeterService::UGreeterService()
	: d(new UGreeterService::Private())
{
}

UGreeterService::~UGreeterService()
{
	delete d;
}

void UGreeterService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("GreeterService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to GreeterService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel((const char*)StringCast<UTF8CHAR>(*serviceEndPoint).Get(), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = greet::GreeterService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UGreeterService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UGreeterServiceClient* UGreeterService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UGreeterServiceClient>();
	return client;
}

void UGreeterService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UGreeterService::CallSayHello(const FGrpcGreetHelloRequest& Request, FSayHelloResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UGreeterServiceSayHelloLambdaWrapper* lambdaWrapper = NewObject<UGreeterServiceSayHelloLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSayHello();
	InnerClient->OnSayHelloResponse.AddUniqueDynamic(lambdaWrapper, &UGreeterServiceSayHelloLambdaWrapper::OnResponse);
	InnerClient->SayHello(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}
