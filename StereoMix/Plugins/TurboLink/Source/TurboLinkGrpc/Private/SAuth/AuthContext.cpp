//Generated by TurboLink CodeGenerator, do not edit!
#include "AuthContext.h"
#include "SAuth/AuthClient.h"
#include "AuthService_Private.h"
#include "AuthMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_AuthService_GuestLogin::GrpcContext_AuthService_GuestLogin(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_AuthService_GuestLogin::Call(const FGrpcAuthGuestLoginRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::auth::GuestLoginRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UAuthService* service = (UAuthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGuestLogin(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_AuthService_GuestLogin::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::auth::LoginResponse* _RpcResponse) 
		{
			UAuthServiceClient* client = (UAuthServiceClient*)(this->Client);
			if (!(client->OnGuestLoginResponse.IsBound())) return;

			FGrpcAuthLoginResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGuestLoginResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_AuthService_ValidateUserToken::GrpcContext_AuthService_ValidateUserToken(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_AuthService_ValidateUserToken::Call(const FGrpcAuthValidateUserTokenRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::auth::ValidateUserTokenRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UAuthService* service = (UAuthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncValidateUserToken(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_AuthService_ValidateUserToken::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::auth::ValidateUserTokenResponse* _RpcResponse) 
		{
			UAuthServiceClient* client = (UAuthServiceClient*)(this->Client);
			if (!(client->OnValidateUserTokenResponse.IsBound())) return;

			FGrpcAuthValidateUserTokenResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnValidateUserTokenResponse.Broadcast(Handle, _Result, response);
		}
	);
}
