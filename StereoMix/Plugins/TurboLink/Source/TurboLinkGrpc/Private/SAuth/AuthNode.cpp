//Generated by TurboLink CodeGenerator, do not edit!
#include "SAuth/AuthNode.h"
#include "SAuth/AuthService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallAuthServiceGuestLogin* UCallAuthServiceGuestLogin::GuestLogin(UObject* WorldContextObject, const FGrpcAuthGuestLoginRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallAuthServiceGuestLogin* node = NewObject<UCallAuthServiceGuestLogin>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->AuthService = Cast<UAuthService>(turboLinkManager->MakeService("AuthService"));
	if (node->AuthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->AuthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallAuthServiceGuestLogin::OnServiceStateChanged);
	return node;
}

void UCallAuthServiceGuestLogin::Activate()
{
	AuthService->Connect();
}

void UCallAuthServiceGuestLogin::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcAuthResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		AuthServiceClient = AuthService->MakeClient();
		AuthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallAuthServiceGuestLogin::OnContextStateChange);
		AuthServiceClient->OnGuestLoginResponse.AddUniqueDynamic(this, &UCallAuthServiceGuestLogin::OnResponse);

		Context = AuthServiceClient->InitGuestLogin();
		AuthServiceClient->GuestLogin(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallAuthServiceGuestLogin::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallAuthServiceGuestLogin::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcAuthResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGuestLoginResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallAuthServiceGuestLogin::Shutdown()
{
	AuthService->OnServiceStateChanged.RemoveDynamic(this, &UCallAuthServiceGuestLogin::OnServiceStateChanged);
	if (AuthServiceClient != nullptr)
	{
		AuthService->RemoveClient(AuthServiceClient);
		AuthServiceClient->Shutdown();
		AuthServiceClient = nullptr;
	}

	if (AuthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(AuthService);
		AuthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallAuthServiceRegisterGameServer* UCallAuthServiceRegisterGameServer::RegisterGameServer(UObject* WorldContextObject, const FGrpcAuthRegisterGameServerRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallAuthServiceRegisterGameServer* node = NewObject<UCallAuthServiceRegisterGameServer>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->AuthService = Cast<UAuthService>(turboLinkManager->MakeService("AuthService"));
	if (node->AuthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->AuthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallAuthServiceRegisterGameServer::OnServiceStateChanged);
	return node;
}

void UCallAuthServiceRegisterGameServer::Activate()
{
	AuthService->Connect();
}

void UCallAuthServiceRegisterGameServer::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcAuthResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		AuthServiceClient = AuthService->MakeClient();
		AuthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallAuthServiceRegisterGameServer::OnContextStateChange);
		AuthServiceClient->OnRegisterGameServerResponse.AddUniqueDynamic(this, &UCallAuthServiceRegisterGameServer::OnResponse);

		Context = AuthServiceClient->InitRegisterGameServer();
		AuthServiceClient->RegisterGameServer(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallAuthServiceRegisterGameServer::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallAuthServiceRegisterGameServer::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcAuthResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnRegisterGameServerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallAuthServiceRegisterGameServer::Shutdown()
{
	AuthService->OnServiceStateChanged.RemoveDynamic(this, &UCallAuthServiceRegisterGameServer::OnServiceStateChanged);
	if (AuthServiceClient != nullptr)
	{
		AuthService->RemoveClient(AuthServiceClient);
		AuthServiceClient->Shutdown();
		AuthServiceClient = nullptr;
	}

	if (AuthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(AuthService);
		AuthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
