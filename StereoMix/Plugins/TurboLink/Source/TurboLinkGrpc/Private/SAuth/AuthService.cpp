//Generated by TurboLink CodeGenerator, do not edit!
#include "SAuth/AuthService.h"
#include "SAuth/AuthClient.h"
#include "AuthService_Private.h"
#include "AuthMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UAuthService::UAuthService()
	: d(new UAuthService::Private())
{
}

UAuthService::~UAuthService()
{
	delete d;
}

void UAuthService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("AuthService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to AuthService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel((const char*)StringCast<UTF8CHAR>(*serviceEndPoint).Get(), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = auth::AuthService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UAuthService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UAuthServiceClient* UAuthService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UAuthServiceClient>();
	return client;
}

void UAuthService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UAuthService::CallGuestLogin(const FGrpcAuthGuestLoginRequest& Request, FGuestLoginResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UAuthServiceGuestLoginLambdaWrapper* lambdaWrapper = NewObject<UAuthServiceGuestLoginLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGuestLogin();
	InnerClient->OnGuestLoginResponse.AddUniqueDynamic(lambdaWrapper, &UAuthServiceGuestLoginLambdaWrapper::OnResponse);
	InnerClient->GuestLogin(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UAuthService::CallValidateUserToken(const FGrpcAuthValidateUserTokenRequest& Request, FValidateUserTokenResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UAuthServiceValidateUserTokenLambdaWrapper* lambdaWrapper = NewObject<UAuthServiceValidateUserTokenLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitValidateUserToken();
	InnerClient->OnValidateUserTokenResponse.AddUniqueDynamic(lambdaWrapper, &UAuthServiceValidateUserTokenLambdaWrapper::OnResponse);
	InnerClient->ValidateUserToken(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}
