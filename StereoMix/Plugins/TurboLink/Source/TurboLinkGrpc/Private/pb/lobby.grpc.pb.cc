// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lobby.proto

#include "lobby.pb.h"
#include "lobby.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace lobby {

static const char* LobbyService_method_names[] = {
  "/lobby.LobbyService/CreateRoom",
  "/lobby.LobbyService/JoinRoom",
  "/lobby.LobbyService/GetRoomList",
  "/lobby.LobbyService/UpdateRoomInfo",
};

std::unique_ptr< LobbyService::Stub> LobbyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LobbyService::Stub> stub(new LobbyService::Stub(channel, options));
  return stub;
}

LobbyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRoom_(LobbyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinRoom_(LobbyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoomList_(LobbyService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRoomInfo_(LobbyService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LobbyService::Stub::CreateRoom(::grpc::ClientContext* context, const ::lobby::CreateRoomRequest& request, ::lobby::ConnectionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lobby::CreateRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRoom_, context, request, response);
}

void LobbyService::Stub::async::CreateRoom(::grpc::ClientContext* context, const ::lobby::CreateRoomRequest* request, ::lobby::ConnectionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lobby::CreateRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoom_, context, request, response, std::move(f));
}

void LobbyService::Stub::async::CreateRoom(::grpc::ClientContext* context, const ::lobby::CreateRoomRequest* request, ::lobby::ConnectionInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lobby::ConnectionInfo>* LobbyService::Stub::PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::lobby::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lobby::ConnectionInfo, ::lobby::CreateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lobby::ConnectionInfo>* LobbyService::Stub::AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::lobby::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LobbyService::Stub::JoinRoom(::grpc::ClientContext* context, const ::lobby::JoinRoomRequest& request, ::lobby::ConnectionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lobby::JoinRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinRoom_, context, request, response);
}

void LobbyService::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::lobby::JoinRoomRequest* request, ::lobby::ConnectionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lobby::JoinRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, std::move(f));
}

void LobbyService::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::lobby::JoinRoomRequest* request, ::lobby::ConnectionInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lobby::ConnectionInfo>* LobbyService::Stub::PrepareAsyncJoinRoomRaw(::grpc::ClientContext* context, const ::lobby::JoinRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lobby::ConnectionInfo, ::lobby::JoinRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lobby::ConnectionInfo>* LobbyService::Stub::AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::lobby::JoinRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LobbyService::Stub::GetRoomList(::grpc::ClientContext* context, const ::lobby::GetRoomListRequest& request, ::lobby::GetRoomListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lobby::GetRoomListRequest, ::lobby::GetRoomListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoomList_, context, request, response);
}

void LobbyService::Stub::async::GetRoomList(::grpc::ClientContext* context, const ::lobby::GetRoomListRequest* request, ::lobby::GetRoomListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lobby::GetRoomListRequest, ::lobby::GetRoomListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomList_, context, request, response, std::move(f));
}

void LobbyService::Stub::async::GetRoomList(::grpc::ClientContext* context, const ::lobby::GetRoomListRequest* request, ::lobby::GetRoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lobby::GetRoomListResponse>* LobbyService::Stub::PrepareAsyncGetRoomListRaw(::grpc::ClientContext* context, const ::lobby::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lobby::GetRoomListResponse, ::lobby::GetRoomListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoomList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lobby::GetRoomListResponse>* LobbyService::Stub::AsyncGetRoomListRaw(::grpc::ClientContext* context, const ::lobby::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LobbyService::Stub::UpdateRoomInfo(::grpc::ClientContext* context, const ::lobby::UpdateRoomInfoRequest& request, ::lobby::UpdateRoomInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lobby::UpdateRoomInfoRequest, ::lobby::UpdateRoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRoomInfo_, context, request, response);
}

void LobbyService::Stub::async::UpdateRoomInfo(::grpc::ClientContext* context, const ::lobby::UpdateRoomInfoRequest* request, ::lobby::UpdateRoomInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lobby::UpdateRoomInfoRequest, ::lobby::UpdateRoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRoomInfo_, context, request, response, std::move(f));
}

void LobbyService::Stub::async::UpdateRoomInfo(::grpc::ClientContext* context, const ::lobby::UpdateRoomInfoRequest* request, ::lobby::UpdateRoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRoomInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lobby::UpdateRoomInfoResponse>* LobbyService::Stub::PrepareAsyncUpdateRoomInfoRaw(::grpc::ClientContext* context, const ::lobby::UpdateRoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lobby::UpdateRoomInfoResponse, ::lobby::UpdateRoomInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRoomInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lobby::UpdateRoomInfoResponse>* LobbyService::Stub::AsyncUpdateRoomInfoRaw(::grpc::ClientContext* context, const ::lobby::UpdateRoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRoomInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

LobbyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LobbyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LobbyService::Service, ::lobby::CreateRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LobbyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lobby::CreateRoomRequest* req,
             ::lobby::ConnectionInfo* resp) {
               return service->CreateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LobbyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LobbyService::Service, ::lobby::JoinRoomRequest, ::lobby::ConnectionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LobbyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lobby::JoinRoomRequest* req,
             ::lobby::ConnectionInfo* resp) {
               return service->JoinRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LobbyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LobbyService::Service, ::lobby::GetRoomListRequest, ::lobby::GetRoomListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LobbyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lobby::GetRoomListRequest* req,
             ::lobby::GetRoomListResponse* resp) {
               return service->GetRoomList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LobbyService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LobbyService::Service, ::lobby::UpdateRoomInfoRequest, ::lobby::UpdateRoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LobbyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lobby::UpdateRoomInfoRequest* req,
             ::lobby::UpdateRoomInfoResponse* resp) {
               return service->UpdateRoomInfo(ctx, req, resp);
             }, this)));
}

LobbyService::Service::~Service() {
}

::grpc::Status LobbyService::Service::CreateRoom(::grpc::ServerContext* context, const ::lobby::CreateRoomRequest* request, ::lobby::ConnectionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LobbyService::Service::JoinRoom(::grpc::ServerContext* context, const ::lobby::JoinRoomRequest* request, ::lobby::ConnectionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LobbyService::Service::GetRoomList(::grpc::ServerContext* context, const ::lobby::GetRoomListRequest* request, ::lobby::GetRoomListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LobbyService::Service::UpdateRoomInfo(::grpc::ServerContext* context, const ::lobby::UpdateRoomInfoRequest* request, ::lobby::UpdateRoomInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lobby

