// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace auth {

class AuthService final {
 public:
  static constexpr char const* service_full_name() {
    return "auth.AuthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::auth::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>> AsyncGuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>>(AsyncGuestLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>> PrepareAsyncGuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>>(PrepareAsyncGuestLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::auth::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>> AsyncRegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>>(AsyncRegisterGameServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>> PrepareAsyncRegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>>(PrepareAsyncRegisterGameServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>* AsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>* PrepareAsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>* AsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Response>* PrepareAsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::auth::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>> AsyncGuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>>(AsyncGuestLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>> PrepareAsyncGuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>>(PrepareAsyncGuestLoginRaw(context, request, cq));
    }
    ::grpc::Status RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::auth::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>> AsyncRegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>>(AsyncRegisterGameServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>> PrepareAsyncRegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Response>>(PrepareAsyncRegisterGameServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)>) override;
      void GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)>) override;
      void RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::auth::Response>* AsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Response>* PrepareAsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Response>* AsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Response>* PrepareAsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GuestLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterGameServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GuestLogin(::grpc::ServerContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response);
    virtual ::grpc::Status RegisterGameServer(::grpc::ServerContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GuestLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGuestLogin(::grpc::ServerContext* context, ::auth::GuestLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::auth::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGameServer(::grpc::ServerContext* context, ::auth::RegisterGameServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::auth::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GuestLogin<WithAsyncMethod_RegisterGameServer<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GuestLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::auth::GuestLoginRequest, ::auth::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response) { return this->GuestLogin(context, request, response); }));}
    void SetMessageAllocatorFor_GuestLogin(
        ::grpc::MessageAllocator< ::auth::GuestLoginRequest, ::auth::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::auth::GuestLoginRequest, ::auth::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GuestLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::auth::RegisterGameServerRequest, ::auth::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response) { return this->RegisterGameServer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterGameServer(
        ::grpc::MessageAllocator< ::auth::RegisterGameServerRequest, ::auth::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::auth::RegisterGameServerRequest, ::auth::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGameServer(
      ::grpc::CallbackServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GuestLogin<WithCallbackMethod_RegisterGameServer<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GuestLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GuestLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGuestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGameServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GuestLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GuestLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GuestLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterGameServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGameServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GuestLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GuestLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auth::GuestLoginRequest, ::auth::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::auth::GuestLoginRequest, ::auth::Response>* streamer) {
                       return this->StreamedGuestLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GuestLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GuestLogin(::grpc::ServerContext* /*context*/, const ::auth::GuestLoginRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGuestLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::GuestLoginRequest,::auth::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterGameServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auth::RegisterGameServerRequest, ::auth::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::auth::RegisterGameServerRequest, ::auth::Response>* streamer) {
                       return this->StreamedRegisterGameServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterGameServer(::grpc::ServerContext* /*context*/, const ::auth::RegisterGameServerRequest* /*request*/, ::auth::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterGameServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::RegisterGameServerRequest,::auth::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GuestLogin<WithStreamedUnaryMethod_RegisterGameServer<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GuestLogin<WithStreamedUnaryMethod_RegisterGameServer<Service > > StreamedService;
};

}  // namespace auth


#endif  // GRPC_auth_2eproto__INCLUDED
