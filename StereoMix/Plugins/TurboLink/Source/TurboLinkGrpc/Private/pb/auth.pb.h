#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_auth_2eproto;
namespace auth {
class GuestLoginRequest;
struct GuestLoginRequestDefaultTypeInternal;
extern GuestLoginRequestDefaultTypeInternal _GuestLoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class UserAccount;
struct UserAccountDefaultTypeInternal;
extern UserAccountDefaultTypeInternal _UserAccount_default_instance_;
class ValidateUserTokenRequest;
struct ValidateUserTokenRequestDefaultTypeInternal;
extern ValidateUserTokenRequestDefaultTypeInternal _ValidateUserTokenRequest_default_instance_;
class ValidateUserTokenResponse;
struct ValidateUserTokenResponseDefaultTypeInternal;
extern ValidateUserTokenResponseDefaultTypeInternal _ValidateUserTokenResponse_default_instance_;
}  // namespace auth
PROTOBUF_NAMESPACE_OPEN
template <>
::auth::GuestLoginRequest* Arena::CreateMaybeMessage<::auth::GuestLoginRequest>(Arena*);
template <>
::auth::LoginResponse* Arena::CreateMaybeMessage<::auth::LoginResponse>(Arena*);
template <>
::auth::UserAccount* Arena::CreateMaybeMessage<::auth::UserAccount>(Arena*);
template <>
::auth::ValidateUserTokenRequest* Arena::CreateMaybeMessage<::auth::ValidateUserTokenRequest>(Arena*);
template <>
::auth::ValidateUserTokenResponse* Arena::CreateMaybeMessage<::auth::ValidateUserTokenResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace auth {

// ===================================================================


// -------------------------------------------------------------------

class UserAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.UserAccount) */ {
 public:
  inline UserAccount() : UserAccount(nullptr) {}
  ~UserAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAccount(const UserAccount& from);
  UserAccount(UserAccount&& from) noexcept
    : UserAccount() {
    *this = ::std::move(from);
  }

  inline UserAccount& operator=(const UserAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAccount& operator=(UserAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAccount* internal_default_instance() {
    return reinterpret_cast<const UserAccount*>(
               &_UserAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserAccount& a, UserAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserAccount& from) {
    UserAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "auth.UserAccount";
  }
  protected:
  explicit UserAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string user_name = 2;
  void clear_user_name() ;
  const std::string& user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // @@protoc_insertion_point(class_scope:auth.UserAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class GuestLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.GuestLoginRequest) */ {
 public:
  inline GuestLoginRequest() : GuestLoginRequest(nullptr) {}
  ~GuestLoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GuestLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestLoginRequest(const GuestLoginRequest& from);
  GuestLoginRequest(GuestLoginRequest&& from) noexcept
    : GuestLoginRequest() {
    *this = ::std::move(from);
  }

  inline GuestLoginRequest& operator=(const GuestLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestLoginRequest& operator=(GuestLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestLoginRequest* internal_default_instance() {
    return reinterpret_cast<const GuestLoginRequest*>(
               &_GuestLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GuestLoginRequest& a, GuestLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestLoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestLoginRequest& from) {
    GuestLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "auth.GuestLoginRequest";
  }
  protected:
  explicit GuestLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string user_name = 1;
  void clear_user_name() ;
  const std::string& user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // @@protoc_insertion_point(class_scope:auth.GuestLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "auth.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kRefreshTokenFieldNumber = 2,
    kUserAccountFieldNumber = 3,
  };
  // string access_token = 1;
  void clear_access_token() ;
  const std::string& access_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_token(Arg_&& arg, Args_... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* ptr);

  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(
      const std::string& value);
  std::string* _internal_mutable_access_token();

  public:
  // string refresh_token = 2;
  void clear_refresh_token() ;
  const std::string& refresh_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_refresh_token(Arg_&& arg, Args_... args);
  std::string* mutable_refresh_token();
  PROTOBUF_NODISCARD std::string* release_refresh_token();
  void set_allocated_refresh_token(std::string* ptr);

  private:
  const std::string& _internal_refresh_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refresh_token(
      const std::string& value);
  std::string* _internal_mutable_refresh_token();

  public:
  // .auth.UserAccount user_account = 3;
  bool has_user_account() const;
  void clear_user_account() ;
  const ::auth::UserAccount& user_account() const;
  PROTOBUF_NODISCARD ::auth::UserAccount* release_user_account();
  ::auth::UserAccount* mutable_user_account();
  void set_allocated_user_account(::auth::UserAccount* user_account);
  private:
  const ::auth::UserAccount& _internal_user_account() const;
  ::auth::UserAccount* _internal_mutable_user_account();
  public:
  void unsafe_arena_set_allocated_user_account(
      ::auth::UserAccount* user_account);
  ::auth::UserAccount* unsafe_arena_release_user_account();
  // @@protoc_insertion_point(class_scope:auth.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_token_;
    ::auth::UserAccount* user_account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class ValidateUserTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.ValidateUserTokenRequest) */ {
 public:
  inline ValidateUserTokenRequest() : ValidateUserTokenRequest(nullptr) {}
  ~ValidateUserTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateUserTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateUserTokenRequest(const ValidateUserTokenRequest& from);
  ValidateUserTokenRequest(ValidateUserTokenRequest&& from) noexcept
    : ValidateUserTokenRequest() {
    *this = ::std::move(from);
  }

  inline ValidateUserTokenRequest& operator=(const ValidateUserTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserTokenRequest& operator=(ValidateUserTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateUserTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateUserTokenRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateUserTokenRequest*>(
               &_ValidateUserTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidateUserTokenRequest& a, ValidateUserTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateUserTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateUserTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateUserTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateUserTokenRequest& from) {
    ValidateUserTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserTokenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "auth.ValidateUserTokenRequest";
  }
  protected:
  explicit ValidateUserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
  };
  // string access_token = 1;
  void clear_access_token() ;
  const std::string& access_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_token(Arg_&& arg, Args_... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* ptr);

  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(
      const std::string& value);
  std::string* _internal_mutable_access_token();

  public:
  // @@protoc_insertion_point(class_scope:auth.ValidateUserTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class ValidateUserTokenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.ValidateUserTokenResponse) */ {
 public:
  inline ValidateUserTokenResponse() : ValidateUserTokenResponse(nullptr) {}
  ~ValidateUserTokenResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateUserTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateUserTokenResponse(const ValidateUserTokenResponse& from);
  ValidateUserTokenResponse(ValidateUserTokenResponse&& from) noexcept
    : ValidateUserTokenResponse() {
    *this = ::std::move(from);
  }

  inline ValidateUserTokenResponse& operator=(const ValidateUserTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserTokenResponse& operator=(ValidateUserTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateUserTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateUserTokenResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateUserTokenResponse*>(
               &_ValidateUserTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ValidateUserTokenResponse& a, ValidateUserTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserTokenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateUserTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateUserTokenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateUserTokenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateUserTokenResponse& from) {
    ValidateUserTokenResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserTokenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "auth.ValidateUserTokenResponse";
  }
  protected:
  explicit ValidateUserTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAccountFieldNumber = 2,
    kIsValidFieldNumber = 1,
  };
  // .auth.UserAccount user_account = 2;
  bool has_user_account() const;
  void clear_user_account() ;
  const ::auth::UserAccount& user_account() const;
  PROTOBUF_NODISCARD ::auth::UserAccount* release_user_account();
  ::auth::UserAccount* mutable_user_account();
  void set_allocated_user_account(::auth::UserAccount* user_account);
  private:
  const ::auth::UserAccount& _internal_user_account() const;
  ::auth::UserAccount* _internal_mutable_user_account();
  public:
  void unsafe_arena_set_allocated_user_account(
      ::auth::UserAccount* user_account);
  ::auth::UserAccount* unsafe_arena_release_user_account();
  // bool is_valid = 1;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:auth.ValidateUserTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::auth::UserAccount* user_account_;
    bool is_valid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserAccount

// string user_id = 1;
inline void UserAccount::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserAccount::user_id() const {
  // @@protoc_insertion_point(field_get:auth.UserAccount.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccount::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.UserAccount.user_id)
}
inline std::string* UserAccount::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:auth.UserAccount.user_id)
  return _s;
}
inline const std::string& UserAccount::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserAccount::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserAccount::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* UserAccount::release_user_id() {
  // @@protoc_insertion_point(field_release:auth.UserAccount.user_id)
  return _impl_.user_id_.Release();
}
inline void UserAccount::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.UserAccount.user_id)
}

// string user_name = 2;
inline void UserAccount::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& UserAccount::user_name() const {
  // @@protoc_insertion_point(field_get:auth.UserAccount.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccount::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.UserAccount.user_name)
}
inline std::string* UserAccount::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:auth.UserAccount.user_name)
  return _s;
}
inline const std::string& UserAccount::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void UserAccount::_internal_set_user_name(const std::string& value) {
  ;


  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserAccount::_internal_mutable_user_name() {
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserAccount::release_user_name() {
  // @@protoc_insertion_point(field_release:auth.UserAccount.user_name)
  return _impl_.user_name_.Release();
}
inline void UserAccount::set_allocated_user_name(std::string* value) {
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.UserAccount.user_name)
}

// -------------------------------------------------------------------

// GuestLoginRequest

// string user_name = 1;
inline void GuestLoginRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& GuestLoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:auth.GuestLoginRequest.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GuestLoginRequest::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.GuestLoginRequest.user_name)
}
inline std::string* GuestLoginRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:auth.GuestLoginRequest.user_name)
  return _s;
}
inline const std::string& GuestLoginRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void GuestLoginRequest::_internal_set_user_name(const std::string& value) {
  ;


  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GuestLoginRequest::_internal_mutable_user_name() {
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GuestLoginRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:auth.GuestLoginRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void GuestLoginRequest::set_allocated_user_name(std::string* value) {
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.GuestLoginRequest.user_name)
}

// -------------------------------------------------------------------

// LoginResponse

// string access_token = 1;
inline void LoginResponse::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
}
inline const std::string& LoginResponse::access_token() const {
  // @@protoc_insertion_point(field_get:auth.LoginResponse.access_token)
  return _internal_access_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_access_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.access_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.LoginResponse.access_token)
}
inline std::string* LoginResponse::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:auth.LoginResponse.access_token)
  return _s;
}
inline const std::string& LoginResponse::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void LoginResponse::_internal_set_access_token(const std::string& value) {
  ;


  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_access_token() {
  ;
  return _impl_.access_token_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_access_token() {
  // @@protoc_insertion_point(field_release:auth.LoginResponse.access_token)
  return _impl_.access_token_.Release();
}
inline void LoginResponse::set_allocated_access_token(std::string* value) {
  _impl_.access_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.access_token_.IsDefault()) {
          _impl_.access_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.LoginResponse.access_token)
}

// string refresh_token = 2;
inline void LoginResponse::clear_refresh_token() {
  _impl_.refresh_token_.ClearToEmpty();
}
inline const std::string& LoginResponse::refresh_token() const {
  // @@protoc_insertion_point(field_get:auth.LoginResponse.refresh_token)
  return _internal_refresh_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_refresh_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.refresh_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.LoginResponse.refresh_token)
}
inline std::string* LoginResponse::mutable_refresh_token() {
  std::string* _s = _internal_mutable_refresh_token();
  // @@protoc_insertion_point(field_mutable:auth.LoginResponse.refresh_token)
  return _s;
}
inline const std::string& LoginResponse::_internal_refresh_token() const {
  return _impl_.refresh_token_.Get();
}
inline void LoginResponse::_internal_set_refresh_token(const std::string& value) {
  ;


  _impl_.refresh_token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_refresh_token() {
  ;
  return _impl_.refresh_token_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_refresh_token() {
  // @@protoc_insertion_point(field_release:auth.LoginResponse.refresh_token)
  return _impl_.refresh_token_.Release();
}
inline void LoginResponse::set_allocated_refresh_token(std::string* value) {
  _impl_.refresh_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.refresh_token_.IsDefault()) {
          _impl_.refresh_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.LoginResponse.refresh_token)
}

// .auth.UserAccount user_account = 3;
inline bool LoginResponse::has_user_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_account_ != nullptr);
  return value;
}
inline void LoginResponse::clear_user_account() {
  if (_impl_.user_account_ != nullptr) _impl_.user_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::auth::UserAccount& LoginResponse::_internal_user_account() const {
  const ::auth::UserAccount* p = _impl_.user_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::auth::UserAccount&>(
      ::auth::_UserAccount_default_instance_);
}
inline const ::auth::UserAccount& LoginResponse::user_account() const {
  // @@protoc_insertion_point(field_get:auth.LoginResponse.user_account)
  return _internal_user_account();
}
inline void LoginResponse::unsafe_arena_set_allocated_user_account(
    ::auth::UserAccount* user_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_account_);
  }
  _impl_.user_account_ = user_account;
  if (user_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:auth.LoginResponse.user_account)
}
inline ::auth::UserAccount* LoginResponse::release_user_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::auth::UserAccount* temp = _impl_.user_account_;
  _impl_.user_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::auth::UserAccount* LoginResponse::unsafe_arena_release_user_account() {
  // @@protoc_insertion_point(field_release:auth.LoginResponse.user_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::auth::UserAccount* temp = _impl_.user_account_;
  _impl_.user_account_ = nullptr;
  return temp;
}
inline ::auth::UserAccount* LoginResponse::_internal_mutable_user_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::UserAccount>(GetArenaForAllocation());
    _impl_.user_account_ = p;
  }
  return _impl_.user_account_;
}
inline ::auth::UserAccount* LoginResponse::mutable_user_account() {
  ::auth::UserAccount* _msg = _internal_mutable_user_account();
  // @@protoc_insertion_point(field_mutable:auth.LoginResponse.user_account)
  return _msg;
}
inline void LoginResponse::set_allocated_user_account(::auth::UserAccount* user_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_account_;
  }
  if (user_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_account);
    if (message_arena != submessage_arena) {
      user_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_account_ = user_account;
  // @@protoc_insertion_point(field_set_allocated:auth.LoginResponse.user_account)
}

// -------------------------------------------------------------------

// ValidateUserTokenRequest

// string access_token = 1;
inline void ValidateUserTokenRequest::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
}
inline const std::string& ValidateUserTokenRequest::access_token() const {
  // @@protoc_insertion_point(field_get:auth.ValidateUserTokenRequest.access_token)
  return _internal_access_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidateUserTokenRequest::set_access_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.access_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.ValidateUserTokenRequest.access_token)
}
inline std::string* ValidateUserTokenRequest::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:auth.ValidateUserTokenRequest.access_token)
  return _s;
}
inline const std::string& ValidateUserTokenRequest::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void ValidateUserTokenRequest::_internal_set_access_token(const std::string& value) {
  ;


  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateUserTokenRequest::_internal_mutable_access_token() {
  ;
  return _impl_.access_token_.Mutable( GetArenaForAllocation());
}
inline std::string* ValidateUserTokenRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:auth.ValidateUserTokenRequest.access_token)
  return _impl_.access_token_.Release();
}
inline void ValidateUserTokenRequest::set_allocated_access_token(std::string* value) {
  _impl_.access_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.access_token_.IsDefault()) {
          _impl_.access_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:auth.ValidateUserTokenRequest.access_token)
}

// -------------------------------------------------------------------

// ValidateUserTokenResponse

// bool is_valid = 1;
inline void ValidateUserTokenResponse::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool ValidateUserTokenResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:auth.ValidateUserTokenResponse.is_valid)
  return _internal_is_valid();
}
inline void ValidateUserTokenResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:auth.ValidateUserTokenResponse.is_valid)
}
inline bool ValidateUserTokenResponse::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline void ValidateUserTokenResponse::_internal_set_is_valid(bool value) {
  ;
  _impl_.is_valid_ = value;
}

// .auth.UserAccount user_account = 2;
inline bool ValidateUserTokenResponse::has_user_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_account_ != nullptr);
  return value;
}
inline void ValidateUserTokenResponse::clear_user_account() {
  if (_impl_.user_account_ != nullptr) _impl_.user_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::auth::UserAccount& ValidateUserTokenResponse::_internal_user_account() const {
  const ::auth::UserAccount* p = _impl_.user_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::auth::UserAccount&>(
      ::auth::_UserAccount_default_instance_);
}
inline const ::auth::UserAccount& ValidateUserTokenResponse::user_account() const {
  // @@protoc_insertion_point(field_get:auth.ValidateUserTokenResponse.user_account)
  return _internal_user_account();
}
inline void ValidateUserTokenResponse::unsafe_arena_set_allocated_user_account(
    ::auth::UserAccount* user_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_account_);
  }
  _impl_.user_account_ = user_account;
  if (user_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:auth.ValidateUserTokenResponse.user_account)
}
inline ::auth::UserAccount* ValidateUserTokenResponse::release_user_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::auth::UserAccount* temp = _impl_.user_account_;
  _impl_.user_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::auth::UserAccount* ValidateUserTokenResponse::unsafe_arena_release_user_account() {
  // @@protoc_insertion_point(field_release:auth.ValidateUserTokenResponse.user_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::auth::UserAccount* temp = _impl_.user_account_;
  _impl_.user_account_ = nullptr;
  return temp;
}
inline ::auth::UserAccount* ValidateUserTokenResponse::_internal_mutable_user_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::UserAccount>(GetArenaForAllocation());
    _impl_.user_account_ = p;
  }
  return _impl_.user_account_;
}
inline ::auth::UserAccount* ValidateUserTokenResponse::mutable_user_account() {
  ::auth::UserAccount* _msg = _internal_mutable_user_account();
  // @@protoc_insertion_point(field_mutable:auth.ValidateUserTokenResponse.user_account)
  return _msg;
}
inline void ValidateUserTokenResponse::set_allocated_user_account(::auth::UserAccount* user_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_account_;
  }
  if (user_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_account);
    if (message_arena != submessage_arena) {
      user_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_account_ = user_account;
  // @@protoc_insertion_point(field_set_allocated:auth.ValidateUserTokenResponse.user_account)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace auth


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh
