#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_lobby_2eproto;
namespace lobby {
class ChangeRoomOwnerRequest;
struct ChangeRoomOwnerRequestDefaultTypeInternal;
extern ChangeRoomOwnerRequestDefaultTypeInternal _ChangeRoomOwnerRequest_default_instance_;
class ChangeRoomOwnerResponse;
struct ChangeRoomOwnerResponseDefaultTypeInternal;
extern ChangeRoomOwnerResponseDefaultTypeInternal _ChangeRoomOwnerResponse_default_instance_;
class ChangeRoomPasswordRequest;
struct ChangeRoomPasswordRequestDefaultTypeInternal;
extern ChangeRoomPasswordRequestDefaultTypeInternal _ChangeRoomPasswordRequest_default_instance_;
class ChangeRoomPasswordResponse;
struct ChangeRoomPasswordResponseDefaultTypeInternal;
extern ChangeRoomPasswordResponseDefaultTypeInternal _ChangeRoomPasswordResponse_default_instance_;
class CreateRoomRequest;
struct CreateRoomRequestDefaultTypeInternal;
extern CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
class CreateRoomResponse;
struct CreateRoomResponseDefaultTypeInternal;
extern CreateRoomResponseDefaultTypeInternal _CreateRoomResponse_default_instance_;
class DeleteRoomRequest;
struct DeleteRoomRequestDefaultTypeInternal;
extern DeleteRoomRequestDefaultTypeInternal _DeleteRoomRequest_default_instance_;
class DeleteRoomResponse;
struct DeleteRoomResponseDefaultTypeInternal;
extern DeleteRoomResponseDefaultTypeInternal _DeleteRoomResponse_default_instance_;
class GetRoomListRequest;
struct GetRoomListRequestDefaultTypeInternal;
extern GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
class GetRoomListResponse;
struct GetRoomListResponseDefaultTypeInternal;
extern GetRoomListResponseDefaultTypeInternal _GetRoomListResponse_default_instance_;
class JoinRoomRequest;
struct JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class JoinRoomResponse;
struct JoinRoomResponseDefaultTypeInternal;
extern JoinRoomResponseDefaultTypeInternal _JoinRoomResponse_default_instance_;
class JoinRoomWithCodeRequest;
struct JoinRoomWithCodeRequestDefaultTypeInternal;
extern JoinRoomWithCodeRequestDefaultTypeInternal _JoinRoomWithCodeRequest_default_instance_;
class JoinRoomWithCodeResponse;
struct JoinRoomWithCodeResponseDefaultTypeInternal;
extern JoinRoomWithCodeResponseDefaultTypeInternal _JoinRoomWithCodeResponse_default_instance_;
class ListenRoomUpdatesRequest;
struct ListenRoomUpdatesRequestDefaultTypeInternal;
extern ListenRoomUpdatesRequestDefaultTypeInternal _ListenRoomUpdatesRequest_default_instance_;
class QuickMatchRequest;
struct QuickMatchRequestDefaultTypeInternal;
extern QuickMatchRequestDefaultTypeInternal _QuickMatchRequest_default_instance_;
class QuickMatchResponse;
struct QuickMatchResponseDefaultTypeInternal;
extern QuickMatchResponseDefaultTypeInternal _QuickMatchResponse_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomConfig;
struct RoomConfigDefaultTypeInternal;
extern RoomConfigDefaultTypeInternal _RoomConfig_default_instance_;
class RoomConnectionInfo;
struct RoomConnectionInfoDefaultTypeInternal;
extern RoomConnectionInfoDefaultTypeInternal _RoomConnectionInfo_default_instance_;
class UpdateRoomConfigRequest;
struct UpdateRoomConfigRequestDefaultTypeInternal;
extern UpdateRoomConfigRequestDefaultTypeInternal _UpdateRoomConfigRequest_default_instance_;
class UpdateRoomConfigResponse;
struct UpdateRoomConfigResponseDefaultTypeInternal;
extern UpdateRoomConfigResponseDefaultTypeInternal _UpdateRoomConfigResponse_default_instance_;
class UpdateRoomStateRequest;
struct UpdateRoomStateRequestDefaultTypeInternal;
extern UpdateRoomStateRequestDefaultTypeInternal _UpdateRoomStateRequest_default_instance_;
class UpdateRoomStateResponse;
struct UpdateRoomStateResponseDefaultTypeInternal;
extern UpdateRoomStateResponseDefaultTypeInternal _UpdateRoomStateResponse_default_instance_;
}  // namespace lobby
PROTOBUF_NAMESPACE_OPEN
template <>
::lobby::ChangeRoomOwnerRequest* Arena::CreateMaybeMessage<::lobby::ChangeRoomOwnerRequest>(Arena*);
template <>
::lobby::ChangeRoomOwnerResponse* Arena::CreateMaybeMessage<::lobby::ChangeRoomOwnerResponse>(Arena*);
template <>
::lobby::ChangeRoomPasswordRequest* Arena::CreateMaybeMessage<::lobby::ChangeRoomPasswordRequest>(Arena*);
template <>
::lobby::ChangeRoomPasswordResponse* Arena::CreateMaybeMessage<::lobby::ChangeRoomPasswordResponse>(Arena*);
template <>
::lobby::CreateRoomRequest* Arena::CreateMaybeMessage<::lobby::CreateRoomRequest>(Arena*);
template <>
::lobby::CreateRoomResponse* Arena::CreateMaybeMessage<::lobby::CreateRoomResponse>(Arena*);
template <>
::lobby::DeleteRoomRequest* Arena::CreateMaybeMessage<::lobby::DeleteRoomRequest>(Arena*);
template <>
::lobby::DeleteRoomResponse* Arena::CreateMaybeMessage<::lobby::DeleteRoomResponse>(Arena*);
template <>
::lobby::GetRoomListRequest* Arena::CreateMaybeMessage<::lobby::GetRoomListRequest>(Arena*);
template <>
::lobby::GetRoomListResponse* Arena::CreateMaybeMessage<::lobby::GetRoomListResponse>(Arena*);
template <>
::lobby::JoinRoomRequest* Arena::CreateMaybeMessage<::lobby::JoinRoomRequest>(Arena*);
template <>
::lobby::JoinRoomResponse* Arena::CreateMaybeMessage<::lobby::JoinRoomResponse>(Arena*);
template <>
::lobby::JoinRoomWithCodeRequest* Arena::CreateMaybeMessage<::lobby::JoinRoomWithCodeRequest>(Arena*);
template <>
::lobby::JoinRoomWithCodeResponse* Arena::CreateMaybeMessage<::lobby::JoinRoomWithCodeResponse>(Arena*);
template <>
::lobby::ListenRoomUpdatesRequest* Arena::CreateMaybeMessage<::lobby::ListenRoomUpdatesRequest>(Arena*);
template <>
::lobby::QuickMatchRequest* Arena::CreateMaybeMessage<::lobby::QuickMatchRequest>(Arena*);
template <>
::lobby::QuickMatchResponse* Arena::CreateMaybeMessage<::lobby::QuickMatchResponse>(Arena*);
template <>
::lobby::Room* Arena::CreateMaybeMessage<::lobby::Room>(Arena*);
template <>
::lobby::RoomConfig* Arena::CreateMaybeMessage<::lobby::RoomConfig>(Arena*);
template <>
::lobby::RoomConnectionInfo* Arena::CreateMaybeMessage<::lobby::RoomConnectionInfo>(Arena*);
template <>
::lobby::UpdateRoomConfigRequest* Arena::CreateMaybeMessage<::lobby::UpdateRoomConfigRequest>(Arena*);
template <>
::lobby::UpdateRoomConfigResponse* Arena::CreateMaybeMessage<::lobby::UpdateRoomConfigResponse>(Arena*);
template <>
::lobby::UpdateRoomStateRequest* Arena::CreateMaybeMessage<::lobby::UpdateRoomStateRequest>(Arena*);
template <>
::lobby::UpdateRoomStateResponse* Arena::CreateMaybeMessage<::lobby::UpdateRoomStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace lobby {
enum RoomState : int {
  ROOM_STATE_UNSPECIFIED = 0,
  ROOM_STATE_OPEN = 1,
  ROOM_STATE_PLAYING = 2,
  ROOM_STATE_CLOSED = 3,
  RoomState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomState_IsValid(int value);
constexpr RoomState RoomState_MIN = static_cast<RoomState>(0);
constexpr RoomState RoomState_MAX = static_cast<RoomState>(3);
constexpr int RoomState_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RoomState_descriptor();
template <typename T>
const std::string& RoomState_Name(T value) {
  static_assert(std::is_same<T, RoomState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomState_Name().");
  return RoomState_Name(static_cast<RoomState>(value));
}
template <>
inline const std::string& RoomState_Name(RoomState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RoomState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RoomState_Parse(absl::string_view name, RoomState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomState>(
      RoomState_descriptor(), name, value);
}
enum RoomVisibility : int {
  ROOM_VISIBILITY_UNSPECIFIED = 0,
  ROOM_VISIBILITY_PUBLIC = 1,
  ROOM_VISIBILITY_PRIVATE = 2,
  RoomVisibility_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomVisibility_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomVisibility_IsValid(int value);
constexpr RoomVisibility RoomVisibility_MIN = static_cast<RoomVisibility>(0);
constexpr RoomVisibility RoomVisibility_MAX = static_cast<RoomVisibility>(2);
constexpr int RoomVisibility_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RoomVisibility_descriptor();
template <typename T>
const std::string& RoomVisibility_Name(T value) {
  static_assert(std::is_same<T, RoomVisibility>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomVisibility_Name().");
  return RoomVisibility_Name(static_cast<RoomVisibility>(value));
}
template <>
inline const std::string& RoomVisibility_Name(RoomVisibility value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RoomVisibility_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RoomVisibility_Parse(absl::string_view name, RoomVisibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomVisibility>(
      RoomVisibility_descriptor(), name, value);
}
enum GameMode : int {
  GAME_MODE_UNSPECIFIED = 0,
  GAME_MODE_DEFAULT = 1,
  GameMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMode_IsValid(int value);
constexpr GameMode GameMode_MIN = static_cast<GameMode>(0);
constexpr GameMode GameMode_MAX = static_cast<GameMode>(1);
constexpr int GameMode_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GameMode_descriptor();
template <typename T>
const std::string& GameMode_Name(T value) {
  static_assert(std::is_same<T, GameMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMode_Name().");
  return GameMode_Name(static_cast<GameMode>(value));
}
template <>
inline const std::string& GameMode_Name(GameMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GameMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GameMode_Parse(absl::string_view name, GameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMode>(
      GameMode_descriptor(), name, value);
}
enum GameMap : int {
  GAME_MAP_UNSPECIFIED = 0,
  GAME_MAP_DEFAULT = 1,
  GameMap_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMap_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMap_IsValid(int value);
constexpr GameMap GameMap_MIN = static_cast<GameMap>(0);
constexpr GameMap GameMap_MAX = static_cast<GameMap>(1);
constexpr int GameMap_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GameMap_descriptor();
template <typename T>
const std::string& GameMap_Name(T value) {
  static_assert(std::is_same<T, GameMap>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMap_Name().");
  return GameMap_Name(static_cast<GameMap>(value));
}
template <>
inline const std::string& GameMap_Name(GameMap value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GameMap_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GameMap_Parse(absl::string_view name, GameMap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMap>(
      GameMap_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RoomConnectionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.RoomConnectionInfo) */ {
 public:
  inline RoomConnectionInfo() : RoomConnectionInfo(nullptr) {}
  ~RoomConnectionInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoomConnectionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomConnectionInfo(const RoomConnectionInfo& from);
  RoomConnectionInfo(RoomConnectionInfo&& from) noexcept
    : RoomConnectionInfo() {
    *this = ::std::move(from);
  }

  inline RoomConnectionInfo& operator=(const RoomConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomConnectionInfo& operator=(RoomConnectionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomConnectionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const RoomConnectionInfo*>(
               &_RoomConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomConnectionInfo& a, RoomConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomConnectionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomConnectionInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomConnectionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomConnectionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomConnectionInfo& from) {
    RoomConnectionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomConnectionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.RoomConnectionInfo";
  }
  protected:
  explicit RoomConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.RoomConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class RoomConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.RoomConfig) */ {
 public:
  inline RoomConfig() : RoomConfig(nullptr) {}
  ~RoomConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoomConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomConfig(const RoomConfig& from);
  RoomConfig(RoomConfig&& from) noexcept
    : RoomConfig() {
    *this = ::std::move(from);
  }

  inline RoomConfig& operator=(const RoomConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomConfig& operator=(RoomConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomConfig* internal_default_instance() {
    return reinterpret_cast<const RoomConfig*>(
               &_RoomConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomConfig& a, RoomConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomConfig& from) {
    RoomConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.RoomConfig";
  }
  protected:
  explicit RoomConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kVisibilityFieldNumber = 3,
    kModeFieldNumber = 4,
    kMapFieldNumber = 5,
  };
  // string room_name = 1;
  void clear_room_name() ;
  const std::string& room_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* ptr);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // .lobby.RoomVisibility visibility = 3;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 4;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 5;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.RoomConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    int visibility_;
    int mode_;
    int map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kRoomCodeFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
    kConfigFieldNumber = 4,
    kConnectionFieldNumber = 8,
    kStateFieldNumber = 5,
    kMaxPlayersFieldNumber = 6,
    kCurrentPlayersFieldNumber = 7,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // string room_code = 2;
  void clear_room_code() ;
  const std::string& room_code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_code(Arg_&& arg, Args_... args);
  std::string* mutable_room_code();
  PROTOBUF_NODISCARD std::string* release_room_code();
  void set_allocated_room_code(std::string* ptr);

  private:
  const std::string& _internal_room_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_code(
      const std::string& value);
  std::string* _internal_mutable_room_code();

  public:
  // string owner_id = 3;
  void clear_owner_id() ;
  const std::string& owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* ptr);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // .lobby.RoomConfig config = 4;
  bool has_config() const;
  void clear_config() ;
  const ::lobby::RoomConfig& config() const;
  PROTOBUF_NODISCARD ::lobby::RoomConfig* release_config();
  ::lobby::RoomConfig* mutable_config();
  void set_allocated_config(::lobby::RoomConfig* config);
  private:
  const ::lobby::RoomConfig& _internal_config() const;
  ::lobby::RoomConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::lobby::RoomConfig* config);
  ::lobby::RoomConfig* unsafe_arena_release_config();
  // .lobby.RoomConnectionInfo connection = 8;
  bool has_connection() const;
  void clear_connection() ;
  const ::lobby::RoomConnectionInfo& connection() const;
  PROTOBUF_NODISCARD ::lobby::RoomConnectionInfo* release_connection();
  ::lobby::RoomConnectionInfo* mutable_connection();
  void set_allocated_connection(::lobby::RoomConnectionInfo* connection);
  private:
  const ::lobby::RoomConnectionInfo& _internal_connection() const;
  ::lobby::RoomConnectionInfo* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::lobby::RoomConnectionInfo* connection);
  ::lobby::RoomConnectionInfo* unsafe_arena_release_connection();
  // .lobby.RoomState state = 5;
  void clear_state() ;
  ::lobby::RoomState state() const;
  void set_state(::lobby::RoomState value);

  private:
  ::lobby::RoomState _internal_state() const;
  void _internal_set_state(::lobby::RoomState value);

  public:
  // int32 max_players = 6;
  void clear_max_players() ;
  ::int32_t max_players() const;
  void set_max_players(::int32_t value);

  private:
  ::int32_t _internal_max_players() const;
  void _internal_set_max_players(::int32_t value);

  public:
  // int32 current_players = 7;
  void clear_current_players() ;
  ::int32_t current_players() const;
  void set_current_players(::int32_t value);

  private:
  ::int32_t _internal_current_players() const;
  void _internal_set_current_players(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::lobby::RoomConfig* config_;
    ::lobby::RoomConnectionInfo* connection_;
    int state_;
    ::int32_t max_players_;
    ::int32_t current_players_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class CreateRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.CreateRoomRequest) */ {
 public:
  inline CreateRoomRequest() : CreateRoomRequest(nullptr) {}
  ~CreateRoomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomRequest(const CreateRoomRequest& from);
  CreateRoomRequest(CreateRoomRequest&& from) noexcept
    : CreateRoomRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoomRequest& operator=(const CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomRequest& operator=(CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoomRequest*>(
               &_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRoomRequest& a, CreateRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoomRequest& from) {
    CreateRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.CreateRoomRequest";
  }
  protected:
  explicit CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kConfigFieldNumber = 3,
  };
  // string room_name = 1;
  void clear_room_name() ;
  const std::string& room_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* ptr);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .lobby.RoomConfig config = 3;
  bool has_config() const;
  void clear_config() ;
  const ::lobby::RoomConfig& config() const;
  PROTOBUF_NODISCARD ::lobby::RoomConfig* release_config();
  ::lobby::RoomConfig* mutable_config();
  void set_allocated_config(::lobby::RoomConfig* config);
  private:
  const ::lobby::RoomConfig& _internal_config() const;
  ::lobby::RoomConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::lobby::RoomConfig* config);
  ::lobby::RoomConfig* unsafe_arena_release_config();
  // @@protoc_insertion_point(class_scope:lobby.CreateRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::lobby::RoomConfig* config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class CreateRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.CreateRoomResponse) */ {
 public:
  inline CreateRoomResponse() : CreateRoomResponse(nullptr) {}
  ~CreateRoomResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomResponse(const CreateRoomResponse& from);
  CreateRoomResponse(CreateRoomResponse&& from) noexcept
    : CreateRoomResponse() {
    *this = ::std::move(from);
  }

  inline CreateRoomResponse& operator=(const CreateRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomResponse& operator=(CreateRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRoomResponse*>(
               &_CreateRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateRoomResponse& a, CreateRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoomResponse& from) {
    CreateRoomResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.CreateRoomResponse";
  }
  protected:
  explicit CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .lobby.RoomConnectionInfo connection = 1;
  bool has_connection() const;
  void clear_connection() ;
  const ::lobby::RoomConnectionInfo& connection() const;
  PROTOBUF_NODISCARD ::lobby::RoomConnectionInfo* release_connection();
  ::lobby::RoomConnectionInfo* mutable_connection();
  void set_allocated_connection(::lobby::RoomConnectionInfo* connection);
  private:
  const ::lobby::RoomConnectionInfo& _internal_connection() const;
  ::lobby::RoomConnectionInfo* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::lobby::RoomConnectionInfo* connection);
  ::lobby::RoomConnectionInfo* unsafe_arena_release_connection();
  // @@protoc_insertion_point(class_scope:lobby.CreateRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConnectionInfo* connection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class QuickMatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lobby.QuickMatchRequest) */ {
 public:
  inline QuickMatchRequest() : QuickMatchRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuickMatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuickMatchRequest(const QuickMatchRequest& from);
  QuickMatchRequest(QuickMatchRequest&& from) noexcept
    : QuickMatchRequest() {
    *this = ::std::move(from);
  }

  inline QuickMatchRequest& operator=(const QuickMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuickMatchRequest& operator=(QuickMatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuickMatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuickMatchRequest* internal_default_instance() {
    return reinterpret_cast<const QuickMatchRequest*>(
               &_QuickMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuickMatchRequest& a, QuickMatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuickMatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuickMatchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuickMatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuickMatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QuickMatchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QuickMatchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.QuickMatchRequest";
  }
  protected:
  explicit QuickMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lobby.QuickMatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class QuickMatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.QuickMatchResponse) */ {
 public:
  inline QuickMatchResponse() : QuickMatchResponse(nullptr) {}
  ~QuickMatchResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuickMatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuickMatchResponse(const QuickMatchResponse& from);
  QuickMatchResponse(QuickMatchResponse&& from) noexcept
    : QuickMatchResponse() {
    *this = ::std::move(from);
  }

  inline QuickMatchResponse& operator=(const QuickMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuickMatchResponse& operator=(QuickMatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuickMatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuickMatchResponse* internal_default_instance() {
    return reinterpret_cast<const QuickMatchResponse*>(
               &_QuickMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QuickMatchResponse& a, QuickMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuickMatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuickMatchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuickMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuickMatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuickMatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuickMatchResponse& from) {
    QuickMatchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuickMatchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.QuickMatchResponse";
  }
  protected:
  explicit QuickMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .lobby.RoomConnectionInfo connection = 1;
  bool has_connection() const;
  void clear_connection() ;
  const ::lobby::RoomConnectionInfo& connection() const;
  PROTOBUF_NODISCARD ::lobby::RoomConnectionInfo* release_connection();
  ::lobby::RoomConnectionInfo* mutable_connection();
  void set_allocated_connection(::lobby::RoomConnectionInfo* connection);
  private:
  const ::lobby::RoomConnectionInfo& _internal_connection() const;
  ::lobby::RoomConnectionInfo* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::lobby::RoomConnectionInfo* connection);
  ::lobby::RoomConnectionInfo* unsafe_arena_release_connection();
  // @@protoc_insertion_point(class_scope:lobby.QuickMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConnectionInfo* connection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class JoinRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.JoinRoomRequest) */ {
 public:
  inline JoinRoomRequest() : JoinRoomRequest(nullptr) {}
  ~JoinRoomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomRequest(const JoinRoomRequest& from);
  JoinRoomRequest(JoinRoomRequest&& from) noexcept
    : JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
               &_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRoomRequest& from) {
    JoinRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.JoinRoomRequest";
  }
  protected:
  explicit JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:lobby.JoinRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class JoinRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.JoinRoomResponse) */ {
 public:
  inline JoinRoomResponse() : JoinRoomResponse(nullptr) {}
  ~JoinRoomResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomResponse(const JoinRoomResponse& from);
  JoinRoomResponse(JoinRoomResponse&& from) noexcept
    : JoinRoomResponse() {
    *this = ::std::move(from);
  }

  inline JoinRoomResponse& operator=(const JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomResponse& operator=(JoinRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const JoinRoomResponse*>(
               &_JoinRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JoinRoomResponse& a, JoinRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRoomResponse& from) {
    JoinRoomResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.JoinRoomResponse";
  }
  protected:
  explicit JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .lobby.RoomConnectionInfo connection = 1;
  bool has_connection() const;
  void clear_connection() ;
  const ::lobby::RoomConnectionInfo& connection() const;
  PROTOBUF_NODISCARD ::lobby::RoomConnectionInfo* release_connection();
  ::lobby::RoomConnectionInfo* mutable_connection();
  void set_allocated_connection(::lobby::RoomConnectionInfo* connection);
  private:
  const ::lobby::RoomConnectionInfo& _internal_connection() const;
  ::lobby::RoomConnectionInfo* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::lobby::RoomConnectionInfo* connection);
  ::lobby::RoomConnectionInfo* unsafe_arena_release_connection();
  // @@protoc_insertion_point(class_scope:lobby.JoinRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConnectionInfo* connection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class JoinRoomWithCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.JoinRoomWithCodeRequest) */ {
 public:
  inline JoinRoomWithCodeRequest() : JoinRoomWithCodeRequest(nullptr) {}
  ~JoinRoomWithCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomWithCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomWithCodeRequest(const JoinRoomWithCodeRequest& from);
  JoinRoomWithCodeRequest(JoinRoomWithCodeRequest&& from) noexcept
    : JoinRoomWithCodeRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomWithCodeRequest& operator=(const JoinRoomWithCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomWithCodeRequest& operator=(JoinRoomWithCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomWithCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomWithCodeRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomWithCodeRequest*>(
               &_JoinRoomWithCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JoinRoomWithCodeRequest& a, JoinRoomWithCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomWithCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomWithCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomWithCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomWithCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomWithCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRoomWithCodeRequest& from) {
    JoinRoomWithCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomWithCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.JoinRoomWithCodeRequest";
  }
  protected:
  explicit JoinRoomWithCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
  };
  // string room_code = 1;
  void clear_room_code() ;
  const std::string& room_code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_code(Arg_&& arg, Args_... args);
  std::string* mutable_room_code();
  PROTOBUF_NODISCARD std::string* release_room_code();
  void set_allocated_room_code(std::string* ptr);

  private:
  const std::string& _internal_room_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_code(
      const std::string& value);
  std::string* _internal_mutable_room_code();

  public:
  // @@protoc_insertion_point(class_scope:lobby.JoinRoomWithCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class JoinRoomWithCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.JoinRoomWithCodeResponse) */ {
 public:
  inline JoinRoomWithCodeResponse() : JoinRoomWithCodeResponse(nullptr) {}
  ~JoinRoomWithCodeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomWithCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomWithCodeResponse(const JoinRoomWithCodeResponse& from);
  JoinRoomWithCodeResponse(JoinRoomWithCodeResponse&& from) noexcept
    : JoinRoomWithCodeResponse() {
    *this = ::std::move(from);
  }

  inline JoinRoomWithCodeResponse& operator=(const JoinRoomWithCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomWithCodeResponse& operator=(JoinRoomWithCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomWithCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomWithCodeResponse* internal_default_instance() {
    return reinterpret_cast<const JoinRoomWithCodeResponse*>(
               &_JoinRoomWithCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(JoinRoomWithCodeResponse& a, JoinRoomWithCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomWithCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomWithCodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomWithCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomWithCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomWithCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRoomWithCodeResponse& from) {
    JoinRoomWithCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomWithCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.JoinRoomWithCodeResponse";
  }
  protected:
  explicit JoinRoomWithCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .lobby.RoomConnectionInfo connection = 1;
  bool has_connection() const;
  void clear_connection() ;
  const ::lobby::RoomConnectionInfo& connection() const;
  PROTOBUF_NODISCARD ::lobby::RoomConnectionInfo* release_connection();
  ::lobby::RoomConnectionInfo* mutable_connection();
  void set_allocated_connection(::lobby::RoomConnectionInfo* connection);
  private:
  const ::lobby::RoomConnectionInfo& _internal_connection() const;
  ::lobby::RoomConnectionInfo* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::lobby::RoomConnectionInfo* connection);
  ::lobby::RoomConnectionInfo* unsafe_arena_release_connection();
  // @@protoc_insertion_point(class_scope:lobby.JoinRoomWithCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConnectionInfo* connection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class GetRoomListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.GetRoomListRequest) */ {
 public:
  inline GetRoomListRequest() : GetRoomListRequest(nullptr) {}
  ~GetRoomListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomListRequest(const GetRoomListRequest& from);
  GetRoomListRequest(GetRoomListRequest&& from) noexcept
    : GetRoomListRequest() {
    *this = ::std::move(from);
  }

  inline GetRoomListRequest& operator=(const GetRoomListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomListRequest& operator=(GetRoomListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomListRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoomListRequest*>(
               &_GetRoomListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetRoomListRequest& a, GetRoomListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomListRequest& from) {
    GetRoomListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.GetRoomListRequest";
  }
  protected:
  explicit GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
    kModeFieldNumber = 3,
    kMapFieldNumber = 4,
  };
  // .lobby.RoomVisibility visibility = 1;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 3;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 4;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.GetRoomListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int visibility_;
    int mode_;
    int map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class GetRoomListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.GetRoomListResponse) */ {
 public:
  inline GetRoomListResponse() : GetRoomListResponse(nullptr) {}
  ~GetRoomListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomListResponse(const GetRoomListResponse& from);
  GetRoomListResponse(GetRoomListResponse&& from) noexcept
    : GetRoomListResponse() {
    *this = ::std::move(from);
  }

  inline GetRoomListResponse& operator=(const GetRoomListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomListResponse& operator=(GetRoomListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomListResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoomListResponse*>(
               &_GetRoomListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetRoomListResponse& a, GetRoomListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomListResponse& from) {
    GetRoomListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.GetRoomListResponse";
  }
  protected:
  explicit GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .lobby.Room rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::lobby::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::Room >*
      mutable_rooms();
  private:
  const ::lobby::Room& _internal_rooms(int index) const;
  ::lobby::Room* _internal_add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::Room>& _internal_rooms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::Room>* _internal_mutable_rooms();
  public:
  const ::lobby::Room& rooms(int index) const;
  ::lobby::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::Room >&
      rooms() const;
  // @@protoc_insertion_point(class_scope:lobby.GetRoomListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::Room > rooms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomStateRequest) */ {
 public:
  inline UpdateRoomStateRequest() : UpdateRoomStateRequest(nullptr) {}
  ~UpdateRoomStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomStateRequest(const UpdateRoomStateRequest& from);
  UpdateRoomStateRequest(UpdateRoomStateRequest&& from) noexcept
    : UpdateRoomStateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoomStateRequest& operator=(const UpdateRoomStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomStateRequest& operator=(UpdateRoomStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomStateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomStateRequest*>(
               &_UpdateRoomStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateRoomStateRequest& a, UpdateRoomStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomStateRequest& from) {
    UpdateRoomStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomStateRequest";
  }
  protected:
  explicit UpdateRoomStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .lobby.RoomState state = 1;
  void clear_state() ;
  ::lobby::RoomState state() const;
  void set_state(::lobby::RoomState value);

  private:
  ::lobby::RoomState _internal_state() const;
  void _internal_set_state(::lobby::RoomState value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomStateResponse) */ {
 public:
  inline UpdateRoomStateResponse() : UpdateRoomStateResponse(nullptr) {}
  ~UpdateRoomStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomStateResponse(const UpdateRoomStateResponse& from);
  UpdateRoomStateResponse(UpdateRoomStateResponse&& from) noexcept
    : UpdateRoomStateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoomStateResponse& operator=(const UpdateRoomStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomStateResponse& operator=(UpdateRoomStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomStateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomStateResponse*>(
               &_UpdateRoomStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateRoomStateResponse& a, UpdateRoomStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomStateResponse& from) {
    UpdateRoomStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomStateResponse";
  }
  protected:
  explicit UpdateRoomStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedStateFieldNumber = 1,
  };
  // .lobby.RoomState updated_state = 1;
  void clear_updated_state() ;
  ::lobby::RoomState updated_state() const;
  void set_updated_state(::lobby::RoomState value);

  private:
  ::lobby::RoomState _internal_updated_state() const;
  void _internal_set_updated_state(::lobby::RoomState value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int updated_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomConfigRequest) */ {
 public:
  inline UpdateRoomConfigRequest() : UpdateRoomConfigRequest(nullptr) {}
  ~UpdateRoomConfigRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomConfigRequest(const UpdateRoomConfigRequest& from);
  UpdateRoomConfigRequest(UpdateRoomConfigRequest&& from) noexcept
    : UpdateRoomConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoomConfigRequest& operator=(const UpdateRoomConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomConfigRequest& operator=(UpdateRoomConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomConfigRequest*>(
               &_UpdateRoomConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateRoomConfigRequest& a, UpdateRoomConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomConfigRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomConfigRequest& from) {
    UpdateRoomConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomConfigRequest";
  }
  protected:
  explicit UpdateRoomConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .lobby.RoomConfig config = 1;
  bool has_config() const;
  void clear_config() ;
  const ::lobby::RoomConfig& config() const;
  PROTOBUF_NODISCARD ::lobby::RoomConfig* release_config();
  ::lobby::RoomConfig* mutable_config();
  void set_allocated_config(::lobby::RoomConfig* config);
  private:
  const ::lobby::RoomConfig& _internal_config() const;
  ::lobby::RoomConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::lobby::RoomConfig* config);
  ::lobby::RoomConfig* unsafe_arena_release_config();
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConfig* config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomConfigResponse) */ {
 public:
  inline UpdateRoomConfigResponse() : UpdateRoomConfigResponse(nullptr) {}
  ~UpdateRoomConfigResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomConfigResponse(const UpdateRoomConfigResponse& from);
  UpdateRoomConfigResponse(UpdateRoomConfigResponse&& from) noexcept
    : UpdateRoomConfigResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoomConfigResponse& operator=(const UpdateRoomConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomConfigResponse& operator=(UpdateRoomConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomConfigResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomConfigResponse*>(
               &_UpdateRoomConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateRoomConfigResponse& a, UpdateRoomConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomConfigResponse& from) {
    UpdateRoomConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomConfigResponse";
  }
  protected:
  explicit UpdateRoomConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedConfigFieldNumber = 1,
  };
  // .lobby.RoomConfig updated_config = 1;
  bool has_updated_config() const;
  void clear_updated_config() ;
  const ::lobby::RoomConfig& updated_config() const;
  PROTOBUF_NODISCARD ::lobby::RoomConfig* release_updated_config();
  ::lobby::RoomConfig* mutable_updated_config();
  void set_allocated_updated_config(::lobby::RoomConfig* updated_config);
  private:
  const ::lobby::RoomConfig& _internal_updated_config() const;
  ::lobby::RoomConfig* _internal_mutable_updated_config();
  public:
  void unsafe_arena_set_allocated_updated_config(
      ::lobby::RoomConfig* updated_config);
  ::lobby::RoomConfig* unsafe_arena_release_updated_config();
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomConfig* updated_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ChangeRoomPasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.ChangeRoomPasswordRequest) */ {
 public:
  inline ChangeRoomPasswordRequest() : ChangeRoomPasswordRequest(nullptr) {}
  ~ChangeRoomPasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChangeRoomPasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeRoomPasswordRequest(const ChangeRoomPasswordRequest& from);
  ChangeRoomPasswordRequest(ChangeRoomPasswordRequest&& from) noexcept
    : ChangeRoomPasswordRequest() {
    *this = ::std::move(from);
  }

  inline ChangeRoomPasswordRequest& operator=(const ChangeRoomPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRoomPasswordRequest& operator=(ChangeRoomPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeRoomPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeRoomPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeRoomPasswordRequest*>(
               &_ChangeRoomPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChangeRoomPasswordRequest& a, ChangeRoomPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRoomPasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRoomPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeRoomPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeRoomPasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeRoomPasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeRoomPasswordRequest& from) {
    ChangeRoomPasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRoomPasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ChangeRoomPasswordRequest";
  }
  protected:
  explicit ChangeRoomPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
  };
  // string password = 1;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:lobby.ChangeRoomPasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ChangeRoomPasswordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.ChangeRoomPasswordResponse) */ {
 public:
  inline ChangeRoomPasswordResponse() : ChangeRoomPasswordResponse(nullptr) {}
  ~ChangeRoomPasswordResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChangeRoomPasswordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeRoomPasswordResponse(const ChangeRoomPasswordResponse& from);
  ChangeRoomPasswordResponse(ChangeRoomPasswordResponse&& from) noexcept
    : ChangeRoomPasswordResponse() {
    *this = ::std::move(from);
  }

  inline ChangeRoomPasswordResponse& operator=(const ChangeRoomPasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRoomPasswordResponse& operator=(ChangeRoomPasswordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeRoomPasswordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeRoomPasswordResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeRoomPasswordResponse*>(
               &_ChangeRoomPasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChangeRoomPasswordResponse& a, ChangeRoomPasswordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRoomPasswordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRoomPasswordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeRoomPasswordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeRoomPasswordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeRoomPasswordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeRoomPasswordResponse& from) {
    ChangeRoomPasswordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRoomPasswordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ChangeRoomPasswordResponse";
  }
  protected:
  explicit ChangeRoomPasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // @@protoc_insertion_point(class_scope:lobby.ChangeRoomPasswordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ChangeRoomOwnerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.ChangeRoomOwnerRequest) */ {
 public:
  inline ChangeRoomOwnerRequest() : ChangeRoomOwnerRequest(nullptr) {}
  ~ChangeRoomOwnerRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChangeRoomOwnerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeRoomOwnerRequest(const ChangeRoomOwnerRequest& from);
  ChangeRoomOwnerRequest(ChangeRoomOwnerRequest&& from) noexcept
    : ChangeRoomOwnerRequest() {
    *this = ::std::move(from);
  }

  inline ChangeRoomOwnerRequest& operator=(const ChangeRoomOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRoomOwnerRequest& operator=(ChangeRoomOwnerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeRoomOwnerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeRoomOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeRoomOwnerRequest*>(
               &_ChangeRoomOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChangeRoomOwnerRequest& a, ChangeRoomOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRoomOwnerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRoomOwnerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeRoomOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeRoomOwnerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeRoomOwnerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeRoomOwnerRequest& from) {
    ChangeRoomOwnerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRoomOwnerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ChangeRoomOwnerRequest";
  }
  protected:
  explicit ChangeRoomOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewOwnerIdFieldNumber = 1,
  };
  // string new_owner_id = 1;
  void clear_new_owner_id() ;
  const std::string& new_owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_new_owner_id();
  PROTOBUF_NODISCARD std::string* release_new_owner_id();
  void set_allocated_new_owner_id(std::string* ptr);

  private:
  const std::string& _internal_new_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_owner_id(
      const std::string& value);
  std::string* _internal_mutable_new_owner_id();

  public:
  // @@protoc_insertion_point(class_scope:lobby.ChangeRoomOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ChangeRoomOwnerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.ChangeRoomOwnerResponse) */ {
 public:
  inline ChangeRoomOwnerResponse() : ChangeRoomOwnerResponse(nullptr) {}
  ~ChangeRoomOwnerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChangeRoomOwnerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeRoomOwnerResponse(const ChangeRoomOwnerResponse& from);
  ChangeRoomOwnerResponse(ChangeRoomOwnerResponse&& from) noexcept
    : ChangeRoomOwnerResponse() {
    *this = ::std::move(from);
  }

  inline ChangeRoomOwnerResponse& operator=(const ChangeRoomOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRoomOwnerResponse& operator=(ChangeRoomOwnerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeRoomOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeRoomOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeRoomOwnerResponse*>(
               &_ChangeRoomOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ChangeRoomOwnerResponse& a, ChangeRoomOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRoomOwnerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRoomOwnerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeRoomOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeRoomOwnerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeRoomOwnerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeRoomOwnerResponse& from) {
    ChangeRoomOwnerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRoomOwnerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ChangeRoomOwnerResponse";
  }
  protected:
  explicit ChangeRoomOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
  };
  // string owner_id = 1;
  void clear_owner_id() ;
  const std::string& owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* ptr);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // @@protoc_insertion_point(class_scope:lobby.ChangeRoomOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class DeleteRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lobby.DeleteRoomRequest) */ {
 public:
  inline DeleteRoomRequest() : DeleteRoomRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoomRequest(const DeleteRoomRequest& from);
  DeleteRoomRequest(DeleteRoomRequest&& from) noexcept
    : DeleteRoomRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRoomRequest& operator=(const DeleteRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoomRequest& operator=(DeleteRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoomRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRoomRequest*>(
               &_DeleteRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteRoomRequest& a, DeleteRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.DeleteRoomRequest";
  }
  protected:
  explicit DeleteRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lobby.DeleteRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class DeleteRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lobby.DeleteRoomResponse) */ {
 public:
  inline DeleteRoomResponse() : DeleteRoomResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoomResponse(const DeleteRoomResponse& from);
  DeleteRoomResponse(DeleteRoomResponse&& from) noexcept
    : DeleteRoomResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRoomResponse& operator=(const DeleteRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoomResponse& operator=(DeleteRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoomResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRoomResponse*>(
               &_DeleteRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeleteRoomResponse& a, DeleteRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteRoomResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteRoomResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.DeleteRoomResponse";
  }
  protected:
  explicit DeleteRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lobby.DeleteRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ListenRoomUpdatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lobby.ListenRoomUpdatesRequest) */ {
 public:
  inline ListenRoomUpdatesRequest() : ListenRoomUpdatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListenRoomUpdatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListenRoomUpdatesRequest(const ListenRoomUpdatesRequest& from);
  ListenRoomUpdatesRequest(ListenRoomUpdatesRequest&& from) noexcept
    : ListenRoomUpdatesRequest() {
    *this = ::std::move(from);
  }

  inline ListenRoomUpdatesRequest& operator=(const ListenRoomUpdatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListenRoomUpdatesRequest& operator=(ListenRoomUpdatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListenRoomUpdatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListenRoomUpdatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListenRoomUpdatesRequest*>(
               &_ListenRoomUpdatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListenRoomUpdatesRequest& a, ListenRoomUpdatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListenRoomUpdatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListenRoomUpdatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListenRoomUpdatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListenRoomUpdatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListenRoomUpdatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListenRoomUpdatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ListenRoomUpdatesRequest";
  }
  protected:
  explicit ListenRoomUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lobby.ListenRoomUpdatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lobby_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoomConnectionInfo

// string host = 1;
inline void RoomConnectionInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& RoomConnectionInfo::host() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConnectionInfo.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomConnectionInfo::set_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.RoomConnectionInfo.host)
}
inline std::string* RoomConnectionInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:lobby.RoomConnectionInfo.host)
  return _s;
}
inline const std::string& RoomConnectionInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void RoomConnectionInfo::_internal_set_host(const std::string& value) {
  ;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomConnectionInfo::_internal_mutable_host() {
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomConnectionInfo::release_host() {
  // @@protoc_insertion_point(field_release:lobby.RoomConnectionInfo.host)
  return _impl_.host_.Release();
}
inline void RoomConnectionInfo::set_allocated_host(std::string* value) {
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.RoomConnectionInfo.host)
}

// int32 port = 2;
inline void RoomConnectionInfo::clear_port() {
  _impl_.port_ = 0;
}
inline ::int32_t RoomConnectionInfo::port() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConnectionInfo.port)
  return _internal_port();
}
inline void RoomConnectionInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:lobby.RoomConnectionInfo.port)
}
inline ::int32_t RoomConnectionInfo::_internal_port() const {
  return _impl_.port_;
}
inline void RoomConnectionInfo::_internal_set_port(::int32_t value) {
  ;
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// RoomConfig

// string room_name = 1;
inline void RoomConfig::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& RoomConfig::room_name() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConfig.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomConfig::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.RoomConfig.room_name)
}
inline std::string* RoomConfig::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:lobby.RoomConfig.room_name)
  return _s;
}
inline const std::string& RoomConfig::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void RoomConfig::_internal_set_room_name(const std::string& value) {
  ;


  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomConfig::_internal_mutable_room_name() {
  ;
  return _impl_.room_name_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomConfig::release_room_name() {
  // @@protoc_insertion_point(field_release:lobby.RoomConfig.room_name)
  return _impl_.room_name_.Release();
}
inline void RoomConfig::set_allocated_room_name(std::string* value) {
  _impl_.room_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_name_.IsDefault()) {
          _impl_.room_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.RoomConfig.room_name)
}

// .lobby.RoomVisibility visibility = 3;
inline void RoomConfig::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility RoomConfig::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConfig.visibility)
  return _internal_visibility();
}
inline void RoomConfig::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.RoomConfig.visibility)
}
inline ::lobby::RoomVisibility RoomConfig::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void RoomConfig::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// .lobby.GameMode mode = 4;
inline void RoomConfig::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode RoomConfig::mode() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConfig.mode)
  return _internal_mode();
}
inline void RoomConfig::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.RoomConfig.mode)
}
inline ::lobby::GameMode RoomConfig::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void RoomConfig::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 5;
inline void RoomConfig::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap RoomConfig::map() const {
  // @@protoc_insertion_point(field_get:lobby.RoomConfig.map)
  return _internal_map();
}
inline void RoomConfig::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.RoomConfig.map)
}
inline ::lobby::GameMap RoomConfig::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void RoomConfig::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// -------------------------------------------------------------------

// Room

// string room_id = 1;
inline void Room::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& Room::room_id() const {
  // @@protoc_insertion_point(field_get:lobby.Room.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.Room.room_id)
}
inline std::string* Room::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:lobby.Room.room_id)
  return _s;
}
inline const std::string& Room::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void Room::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Room::release_room_id() {
  // @@protoc_insertion_point(field_release:lobby.Room.room_id)
  return _impl_.room_id_.Release();
}
inline void Room::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.Room.room_id)
}

// string room_code = 2;
inline void Room::clear_room_code() {
  _impl_.room_code_.ClearToEmpty();
}
inline const std::string& Room::room_code() const {
  // @@protoc_insertion_point(field_get:lobby.Room.room_code)
  return _internal_room_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_room_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.Room.room_code)
}
inline std::string* Room::mutable_room_code() {
  std::string* _s = _internal_mutable_room_code();
  // @@protoc_insertion_point(field_mutable:lobby.Room.room_code)
  return _s;
}
inline const std::string& Room::_internal_room_code() const {
  return _impl_.room_code_.Get();
}
inline void Room::_internal_set_room_code(const std::string& value) {
  ;


  _impl_.room_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_room_code() {
  ;
  return _impl_.room_code_.Mutable( GetArenaForAllocation());
}
inline std::string* Room::release_room_code() {
  // @@protoc_insertion_point(field_release:lobby.Room.room_code)
  return _impl_.room_code_.Release();
}
inline void Room::set_allocated_room_code(std::string* value) {
  _impl_.room_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_code_.IsDefault()) {
          _impl_.room_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.Room.room_code)
}

// string owner_id = 3;
inline void Room::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& Room::owner_id() const {
  // @@protoc_insertion_point(field_get:lobby.Room.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.Room.owner_id)
}
inline std::string* Room::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:lobby.Room.owner_id)
  return _s;
}
inline const std::string& Room::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void Room::_internal_set_owner_id(const std::string& value) {
  ;


  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_owner_id() {
  ;
  return _impl_.owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Room::release_owner_id() {
  // @@protoc_insertion_point(field_release:lobby.Room.owner_id)
  return _impl_.owner_id_.Release();
}
inline void Room::set_allocated_owner_id(std::string* value) {
  _impl_.owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_id_.IsDefault()) {
          _impl_.owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.Room.owner_id)
}

// .lobby.RoomConfig config = 4;
inline bool Room::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void Room::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConfig& Room::_internal_config() const {
  const ::lobby::RoomConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConfig&>(
      ::lobby::_RoomConfig_default_instance_);
}
inline const ::lobby::RoomConfig& Room::config() const {
  // @@protoc_insertion_point(field_get:lobby.Room.config)
  return _internal_config();
}
inline void Room::unsafe_arena_set_allocated_config(
    ::lobby::RoomConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.Room.config)
}
inline ::lobby::RoomConfig* Room::release_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConfig* Room::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:lobby.Room.config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::lobby::RoomConfig* Room::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::lobby::RoomConfig* Room::mutable_config() {
  ::lobby::RoomConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:lobby.Room.config)
  return _msg;
}
inline void Room::set_allocated_config(::lobby::RoomConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:lobby.Room.config)
}

// .lobby.RoomState state = 5;
inline void Room::clear_state() {
  _impl_.state_ = 0;
}
inline ::lobby::RoomState Room::state() const {
  // @@protoc_insertion_point(field_get:lobby.Room.state)
  return _internal_state();
}
inline void Room::set_state(::lobby::RoomState value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:lobby.Room.state)
}
inline ::lobby::RoomState Room::_internal_state() const {
  return static_cast<::lobby::RoomState>(_impl_.state_);
}
inline void Room::_internal_set_state(::lobby::RoomState value) {
  ;
  _impl_.state_ = value;
}

// int32 max_players = 6;
inline void Room::clear_max_players() {
  _impl_.max_players_ = 0;
}
inline ::int32_t Room::max_players() const {
  // @@protoc_insertion_point(field_get:lobby.Room.max_players)
  return _internal_max_players();
}
inline void Room::set_max_players(::int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:lobby.Room.max_players)
}
inline ::int32_t Room::_internal_max_players() const {
  return _impl_.max_players_;
}
inline void Room::_internal_set_max_players(::int32_t value) {
  ;
  _impl_.max_players_ = value;
}

// int32 current_players = 7;
inline void Room::clear_current_players() {
  _impl_.current_players_ = 0;
}
inline ::int32_t Room::current_players() const {
  // @@protoc_insertion_point(field_get:lobby.Room.current_players)
  return _internal_current_players();
}
inline void Room::set_current_players(::int32_t value) {
  _internal_set_current_players(value);
  // @@protoc_insertion_point(field_set:lobby.Room.current_players)
}
inline ::int32_t Room::_internal_current_players() const {
  return _impl_.current_players_;
}
inline void Room::_internal_set_current_players(::int32_t value) {
  ;
  _impl_.current_players_ = value;
}

// .lobby.RoomConnectionInfo connection = 8;
inline bool Room::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void Room::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::lobby::RoomConnectionInfo& Room::_internal_connection() const {
  const ::lobby::RoomConnectionInfo* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConnectionInfo&>(
      ::lobby::_RoomConnectionInfo_default_instance_);
}
inline const ::lobby::RoomConnectionInfo& Room::connection() const {
  // @@protoc_insertion_point(field_get:lobby.Room.connection)
  return _internal_connection();
}
inline void Room::unsafe_arena_set_allocated_connection(
    ::lobby::RoomConnectionInfo* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.Room.connection)
}
inline ::lobby::RoomConnectionInfo* Room::release_connection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConnectionInfo* Room::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:lobby.Room.connection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::lobby::RoomConnectionInfo* Room::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConnectionInfo>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::lobby::RoomConnectionInfo* Room::mutable_connection() {
  ::lobby::RoomConnectionInfo* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:lobby.Room.connection)
  return _msg;
}
inline void Room::set_allocated_connection(::lobby::RoomConnectionInfo* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:lobby.Room.connection)
}

// -------------------------------------------------------------------

// CreateRoomRequest

// string room_name = 1;
inline void CreateRoomRequest::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::room_name() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.room_name)
}
inline std::string* CreateRoomRequest::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomRequest.room_name)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void CreateRoomRequest::_internal_set_room_name(const std::string& value) {
  ;


  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_room_name() {
  ;
  return _impl_.room_name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void CreateRoomRequest::set_allocated_room_name(std::string* value) {
  _impl_.room_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_name_.IsDefault()) {
          _impl_.room_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomRequest.room_name)
}

// string password = 2;
inline void CreateRoomRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.password)
}
inline std::string* CreateRoomRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomRequest.password)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CreateRoomRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomRequest.password)
  return _impl_.password_.Release();
}
inline void CreateRoomRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomRequest.password)
}

// .lobby.RoomConfig config = 3;
inline bool CreateRoomRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void CreateRoomRequest::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConfig& CreateRoomRequest::_internal_config() const {
  const ::lobby::RoomConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConfig&>(
      ::lobby::_RoomConfig_default_instance_);
}
inline const ::lobby::RoomConfig& CreateRoomRequest::config() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.config)
  return _internal_config();
}
inline void CreateRoomRequest::unsafe_arena_set_allocated_config(
    ::lobby::RoomConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.CreateRoomRequest.config)
}
inline ::lobby::RoomConfig* CreateRoomRequest::release_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConfig* CreateRoomRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomRequest.config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::lobby::RoomConfig* CreateRoomRequest::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::lobby::RoomConfig* CreateRoomRequest::mutable_config() {
  ::lobby::RoomConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomRequest.config)
  return _msg;
}
inline void CreateRoomRequest::set_allocated_config(::lobby::RoomConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomRequest.config)
}

// -------------------------------------------------------------------

// CreateRoomResponse

// .lobby.RoomConnectionInfo connection = 1;
inline bool CreateRoomResponse::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void CreateRoomResponse::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConnectionInfo& CreateRoomResponse::_internal_connection() const {
  const ::lobby::RoomConnectionInfo* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConnectionInfo&>(
      ::lobby::_RoomConnectionInfo_default_instance_);
}
inline const ::lobby::RoomConnectionInfo& CreateRoomResponse::connection() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomResponse.connection)
  return _internal_connection();
}
inline void CreateRoomResponse::unsafe_arena_set_allocated_connection(
    ::lobby::RoomConnectionInfo* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.CreateRoomResponse.connection)
}
inline ::lobby::RoomConnectionInfo* CreateRoomResponse::release_connection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConnectionInfo* CreateRoomResponse::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomResponse.connection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::lobby::RoomConnectionInfo* CreateRoomResponse::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConnectionInfo>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::lobby::RoomConnectionInfo* CreateRoomResponse::mutable_connection() {
  ::lobby::RoomConnectionInfo* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomResponse.connection)
  return _msg;
}
inline void CreateRoomResponse::set_allocated_connection(::lobby::RoomConnectionInfo* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomResponse.connection)
}

// -------------------------------------------------------------------

// QuickMatchRequest

// -------------------------------------------------------------------

// QuickMatchResponse

// .lobby.RoomConnectionInfo connection = 1;
inline bool QuickMatchResponse::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void QuickMatchResponse::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConnectionInfo& QuickMatchResponse::_internal_connection() const {
  const ::lobby::RoomConnectionInfo* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConnectionInfo&>(
      ::lobby::_RoomConnectionInfo_default_instance_);
}
inline const ::lobby::RoomConnectionInfo& QuickMatchResponse::connection() const {
  // @@protoc_insertion_point(field_get:lobby.QuickMatchResponse.connection)
  return _internal_connection();
}
inline void QuickMatchResponse::unsafe_arena_set_allocated_connection(
    ::lobby::RoomConnectionInfo* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.QuickMatchResponse.connection)
}
inline ::lobby::RoomConnectionInfo* QuickMatchResponse::release_connection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConnectionInfo* QuickMatchResponse::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:lobby.QuickMatchResponse.connection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::lobby::RoomConnectionInfo* QuickMatchResponse::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConnectionInfo>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::lobby::RoomConnectionInfo* QuickMatchResponse::mutable_connection() {
  ::lobby::RoomConnectionInfo* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:lobby.QuickMatchResponse.connection)
  return _msg;
}
inline void QuickMatchResponse::set_allocated_connection(::lobby::RoomConnectionInfo* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:lobby.QuickMatchResponse.connection)
}

// -------------------------------------------------------------------

// JoinRoomRequest

// string room_id = 1;
inline void JoinRoomRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomRequest.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.JoinRoomRequest.room_id)
}
inline std::string* JoinRoomRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomRequest.room_id)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void JoinRoomRequest::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void JoinRoomRequest::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomRequest.room_id)
}

// string password = 2;
inline void JoinRoomRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.JoinRoomRequest.password)
}
inline std::string* JoinRoomRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomRequest.password)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void JoinRoomRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomRequest.password)
  return _impl_.password_.Release();
}
inline void JoinRoomRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomRequest.password)
}

// -------------------------------------------------------------------

// JoinRoomResponse

// .lobby.RoomConnectionInfo connection = 1;
inline bool JoinRoomResponse::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void JoinRoomResponse::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConnectionInfo& JoinRoomResponse::_internal_connection() const {
  const ::lobby::RoomConnectionInfo* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConnectionInfo&>(
      ::lobby::_RoomConnectionInfo_default_instance_);
}
inline const ::lobby::RoomConnectionInfo& JoinRoomResponse::connection() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomResponse.connection)
  return _internal_connection();
}
inline void JoinRoomResponse::unsafe_arena_set_allocated_connection(
    ::lobby::RoomConnectionInfo* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.JoinRoomResponse.connection)
}
inline ::lobby::RoomConnectionInfo* JoinRoomResponse::release_connection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConnectionInfo* JoinRoomResponse::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomResponse.connection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::lobby::RoomConnectionInfo* JoinRoomResponse::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConnectionInfo>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::lobby::RoomConnectionInfo* JoinRoomResponse::mutable_connection() {
  ::lobby::RoomConnectionInfo* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomResponse.connection)
  return _msg;
}
inline void JoinRoomResponse::set_allocated_connection(::lobby::RoomConnectionInfo* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomResponse.connection)
}

// -------------------------------------------------------------------

// JoinRoomWithCodeRequest

// string room_code = 1;
inline void JoinRoomWithCodeRequest::clear_room_code() {
  _impl_.room_code_.ClearToEmpty();
}
inline const std::string& JoinRoomWithCodeRequest::room_code() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomWithCodeRequest.room_code)
  return _internal_room_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomWithCodeRequest::set_room_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.JoinRoomWithCodeRequest.room_code)
}
inline std::string* JoinRoomWithCodeRequest::mutable_room_code() {
  std::string* _s = _internal_mutable_room_code();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomWithCodeRequest.room_code)
  return _s;
}
inline const std::string& JoinRoomWithCodeRequest::_internal_room_code() const {
  return _impl_.room_code_.Get();
}
inline void JoinRoomWithCodeRequest::_internal_set_room_code(const std::string& value) {
  ;


  _impl_.room_code_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomWithCodeRequest::_internal_mutable_room_code() {
  ;
  return _impl_.room_code_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomWithCodeRequest::release_room_code() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomWithCodeRequest.room_code)
  return _impl_.room_code_.Release();
}
inline void JoinRoomWithCodeRequest::set_allocated_room_code(std::string* value) {
  _impl_.room_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_code_.IsDefault()) {
          _impl_.room_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomWithCodeRequest.room_code)
}

// -------------------------------------------------------------------

// JoinRoomWithCodeResponse

// .lobby.RoomConnectionInfo connection = 1;
inline bool JoinRoomWithCodeResponse::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void JoinRoomWithCodeResponse::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConnectionInfo& JoinRoomWithCodeResponse::_internal_connection() const {
  const ::lobby::RoomConnectionInfo* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConnectionInfo&>(
      ::lobby::_RoomConnectionInfo_default_instance_);
}
inline const ::lobby::RoomConnectionInfo& JoinRoomWithCodeResponse::connection() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomWithCodeResponse.connection)
  return _internal_connection();
}
inline void JoinRoomWithCodeResponse::unsafe_arena_set_allocated_connection(
    ::lobby::RoomConnectionInfo* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.JoinRoomWithCodeResponse.connection)
}
inline ::lobby::RoomConnectionInfo* JoinRoomWithCodeResponse::release_connection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConnectionInfo* JoinRoomWithCodeResponse::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomWithCodeResponse.connection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConnectionInfo* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::lobby::RoomConnectionInfo* JoinRoomWithCodeResponse::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConnectionInfo>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::lobby::RoomConnectionInfo* JoinRoomWithCodeResponse::mutable_connection() {
  ::lobby::RoomConnectionInfo* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomWithCodeResponse.connection)
  return _msg;
}
inline void JoinRoomWithCodeResponse::set_allocated_connection(::lobby::RoomConnectionInfo* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomWithCodeResponse.connection)
}

// -------------------------------------------------------------------

// GetRoomListRequest

// .lobby.RoomVisibility visibility = 1;
inline void GetRoomListRequest::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility GetRoomListRequest::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.visibility)
  return _internal_visibility();
}
inline void GetRoomListRequest::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.visibility)
}
inline ::lobby::RoomVisibility GetRoomListRequest::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void GetRoomListRequest::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// .lobby.GameMode mode = 3;
inline void GetRoomListRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode GetRoomListRequest::mode() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.mode)
  return _internal_mode();
}
inline void GetRoomListRequest::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.mode)
}
inline ::lobby::GameMode GetRoomListRequest::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void GetRoomListRequest::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 4;
inline void GetRoomListRequest::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap GetRoomListRequest::map() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.map)
  return _internal_map();
}
inline void GetRoomListRequest::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.map)
}
inline ::lobby::GameMap GetRoomListRequest::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void GetRoomListRequest::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// -------------------------------------------------------------------

// GetRoomListResponse

// repeated .lobby.Room rooms = 1;
inline int GetRoomListResponse::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int GetRoomListResponse::rooms_size() const {
  return _internal_rooms_size();
}
inline void GetRoomListResponse::clear_rooms() {
  _internal_mutable_rooms()->Clear();
}
inline ::lobby::Room* GetRoomListResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:lobby.GetRoomListResponse.rooms)
  return _internal_mutable_rooms()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::Room >*
GetRoomListResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:lobby.GetRoomListResponse.rooms)
  return _internal_mutable_rooms();
}
inline const ::lobby::Room& GetRoomListResponse::_internal_rooms(int index) const {
  return _internal_rooms().Get(index);
}
inline const ::lobby::Room& GetRoomListResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListResponse.rooms)
  return _internal_rooms(index);
}
inline ::lobby::Room* GetRoomListResponse::_internal_add_rooms() {
  return _internal_mutable_rooms()->Add();
}
inline ::lobby::Room* GetRoomListResponse::add_rooms() {
  ::lobby::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:lobby.GetRoomListResponse.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::Room >&
GetRoomListResponse::rooms() const {
  // @@protoc_insertion_point(field_list:lobby.GetRoomListResponse.rooms)
  return _internal_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::Room>&
GetRoomListResponse::_internal_rooms() const {
  return _impl_.rooms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::Room>*
GetRoomListResponse::_internal_mutable_rooms() {
  return &_impl_.rooms_;
}

// -------------------------------------------------------------------

// UpdateRoomStateRequest

// .lobby.RoomState state = 1;
inline void UpdateRoomStateRequest::clear_state() {
  _impl_.state_ = 0;
}
inline ::lobby::RoomState UpdateRoomStateRequest::state() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomStateRequest.state)
  return _internal_state();
}
inline void UpdateRoomStateRequest::set_state(::lobby::RoomState value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomStateRequest.state)
}
inline ::lobby::RoomState UpdateRoomStateRequest::_internal_state() const {
  return static_cast<::lobby::RoomState>(_impl_.state_);
}
inline void UpdateRoomStateRequest::_internal_set_state(::lobby::RoomState value) {
  ;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// UpdateRoomStateResponse

// .lobby.RoomState updated_state = 1;
inline void UpdateRoomStateResponse::clear_updated_state() {
  _impl_.updated_state_ = 0;
}
inline ::lobby::RoomState UpdateRoomStateResponse::updated_state() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomStateResponse.updated_state)
  return _internal_updated_state();
}
inline void UpdateRoomStateResponse::set_updated_state(::lobby::RoomState value) {
   _internal_set_updated_state(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomStateResponse.updated_state)
}
inline ::lobby::RoomState UpdateRoomStateResponse::_internal_updated_state() const {
  return static_cast<::lobby::RoomState>(_impl_.updated_state_);
}
inline void UpdateRoomStateResponse::_internal_set_updated_state(::lobby::RoomState value) {
  ;
  _impl_.updated_state_ = value;
}

// -------------------------------------------------------------------

// UpdateRoomConfigRequest

// .lobby.RoomConfig config = 1;
inline bool UpdateRoomConfigRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void UpdateRoomConfigRequest::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConfig& UpdateRoomConfigRequest::_internal_config() const {
  const ::lobby::RoomConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConfig&>(
      ::lobby::_RoomConfig_default_instance_);
}
inline const ::lobby::RoomConfig& UpdateRoomConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomConfigRequest.config)
  return _internal_config();
}
inline void UpdateRoomConfigRequest::unsafe_arena_set_allocated_config(
    ::lobby::RoomConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.UpdateRoomConfigRequest.config)
}
inline ::lobby::RoomConfig* UpdateRoomConfigRequest::release_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConfig* UpdateRoomConfigRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:lobby.UpdateRoomConfigRequest.config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::lobby::RoomConfig* UpdateRoomConfigRequest::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::lobby::RoomConfig* UpdateRoomConfigRequest::mutable_config() {
  ::lobby::RoomConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:lobby.UpdateRoomConfigRequest.config)
  return _msg;
}
inline void UpdateRoomConfigRequest::set_allocated_config(::lobby::RoomConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:lobby.UpdateRoomConfigRequest.config)
}

// -------------------------------------------------------------------

// UpdateRoomConfigResponse

// .lobby.RoomConfig updated_config = 1;
inline bool UpdateRoomConfigResponse::has_updated_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_config_ != nullptr);
  return value;
}
inline void UpdateRoomConfigResponse::clear_updated_config() {
  if (_impl_.updated_config_ != nullptr) _impl_.updated_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomConfig& UpdateRoomConfigResponse::_internal_updated_config() const {
  const ::lobby::RoomConfig* p = _impl_.updated_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomConfig&>(
      ::lobby::_RoomConfig_default_instance_);
}
inline const ::lobby::RoomConfig& UpdateRoomConfigResponse::updated_config() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomConfigResponse.updated_config)
  return _internal_updated_config();
}
inline void UpdateRoomConfigResponse::unsafe_arena_set_allocated_updated_config(
    ::lobby::RoomConfig* updated_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_config_);
  }
  _impl_.updated_config_ = updated_config;
  if (updated_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.UpdateRoomConfigResponse.updated_config)
}
inline ::lobby::RoomConfig* UpdateRoomConfigResponse::release_updated_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.updated_config_;
  _impl_.updated_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomConfig* UpdateRoomConfigResponse::unsafe_arena_release_updated_config() {
  // @@protoc_insertion_point(field_release:lobby.UpdateRoomConfigResponse.updated_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomConfig* temp = _impl_.updated_config_;
  _impl_.updated_config_ = nullptr;
  return temp;
}
inline ::lobby::RoomConfig* UpdateRoomConfigResponse::_internal_mutable_updated_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomConfig>(GetArenaForAllocation());
    _impl_.updated_config_ = p;
  }
  return _impl_.updated_config_;
}
inline ::lobby::RoomConfig* UpdateRoomConfigResponse::mutable_updated_config() {
  ::lobby::RoomConfig* _msg = _internal_mutable_updated_config();
  // @@protoc_insertion_point(field_mutable:lobby.UpdateRoomConfigResponse.updated_config)
  return _msg;
}
inline void UpdateRoomConfigResponse::set_allocated_updated_config(::lobby::RoomConfig* updated_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.updated_config_;
  }
  if (updated_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(updated_config);
    if (message_arena != submessage_arena) {
      updated_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_config_ = updated_config;
  // @@protoc_insertion_point(field_set_allocated:lobby.UpdateRoomConfigResponse.updated_config)
}

// -------------------------------------------------------------------

// ChangeRoomPasswordRequest

// string password = 1;
inline void ChangeRoomPasswordRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& ChangeRoomPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:lobby.ChangeRoomPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeRoomPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.ChangeRoomPasswordRequest.password)
}
inline std::string* ChangeRoomPasswordRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:lobby.ChangeRoomPasswordRequest.password)
  return _s;
}
inline const std::string& ChangeRoomPasswordRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void ChangeRoomPasswordRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeRoomPasswordRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* ChangeRoomPasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:lobby.ChangeRoomPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void ChangeRoomPasswordRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.ChangeRoomPasswordRequest.password)
}

// -------------------------------------------------------------------

// ChangeRoomPasswordResponse

// string room_id = 1;
inline void ChangeRoomPasswordResponse::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& ChangeRoomPasswordResponse::room_id() const {
  // @@protoc_insertion_point(field_get:lobby.ChangeRoomPasswordResponse.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeRoomPasswordResponse::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.ChangeRoomPasswordResponse.room_id)
}
inline std::string* ChangeRoomPasswordResponse::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:lobby.ChangeRoomPasswordResponse.room_id)
  return _s;
}
inline const std::string& ChangeRoomPasswordResponse::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void ChangeRoomPasswordResponse::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeRoomPasswordResponse::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ChangeRoomPasswordResponse::release_room_id() {
  // @@protoc_insertion_point(field_release:lobby.ChangeRoomPasswordResponse.room_id)
  return _impl_.room_id_.Release();
}
inline void ChangeRoomPasswordResponse::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.ChangeRoomPasswordResponse.room_id)
}

// -------------------------------------------------------------------

// ChangeRoomOwnerRequest

// string new_owner_id = 1;
inline void ChangeRoomOwnerRequest::clear_new_owner_id() {
  _impl_.new_owner_id_.ClearToEmpty();
}
inline const std::string& ChangeRoomOwnerRequest::new_owner_id() const {
  // @@protoc_insertion_point(field_get:lobby.ChangeRoomOwnerRequest.new_owner_id)
  return _internal_new_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeRoomOwnerRequest::set_new_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.ChangeRoomOwnerRequest.new_owner_id)
}
inline std::string* ChangeRoomOwnerRequest::mutable_new_owner_id() {
  std::string* _s = _internal_mutable_new_owner_id();
  // @@protoc_insertion_point(field_mutable:lobby.ChangeRoomOwnerRequest.new_owner_id)
  return _s;
}
inline const std::string& ChangeRoomOwnerRequest::_internal_new_owner_id() const {
  return _impl_.new_owner_id_.Get();
}
inline void ChangeRoomOwnerRequest::_internal_set_new_owner_id(const std::string& value) {
  ;


  _impl_.new_owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeRoomOwnerRequest::_internal_mutable_new_owner_id() {
  ;
  return _impl_.new_owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ChangeRoomOwnerRequest::release_new_owner_id() {
  // @@protoc_insertion_point(field_release:lobby.ChangeRoomOwnerRequest.new_owner_id)
  return _impl_.new_owner_id_.Release();
}
inline void ChangeRoomOwnerRequest::set_allocated_new_owner_id(std::string* value) {
  _impl_.new_owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_owner_id_.IsDefault()) {
          _impl_.new_owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.ChangeRoomOwnerRequest.new_owner_id)
}

// -------------------------------------------------------------------

// ChangeRoomOwnerResponse

// string owner_id = 1;
inline void ChangeRoomOwnerResponse::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& ChangeRoomOwnerResponse::owner_id() const {
  // @@protoc_insertion_point(field_get:lobby.ChangeRoomOwnerResponse.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeRoomOwnerResponse::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.ChangeRoomOwnerResponse.owner_id)
}
inline std::string* ChangeRoomOwnerResponse::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:lobby.ChangeRoomOwnerResponse.owner_id)
  return _s;
}
inline const std::string& ChangeRoomOwnerResponse::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void ChangeRoomOwnerResponse::_internal_set_owner_id(const std::string& value) {
  ;


  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeRoomOwnerResponse::_internal_mutable_owner_id() {
  ;
  return _impl_.owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ChangeRoomOwnerResponse::release_owner_id() {
  // @@protoc_insertion_point(field_release:lobby.ChangeRoomOwnerResponse.owner_id)
  return _impl_.owner_id_.Release();
}
inline void ChangeRoomOwnerResponse::set_allocated_owner_id(std::string* value) {
  _impl_.owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_id_.IsDefault()) {
          _impl_.owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.ChangeRoomOwnerResponse.owner_id)
}

// -------------------------------------------------------------------

// DeleteRoomRequest

// -------------------------------------------------------------------

// DeleteRoomResponse

// -------------------------------------------------------------------

// ListenRoomUpdatesRequest

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lobby


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::lobby::RoomState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::RoomState>() {
  return ::lobby::RoomState_descriptor();
}
template <>
struct is_proto_enum<::lobby::RoomVisibility> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::RoomVisibility>() {
  return ::lobby::RoomVisibility_descriptor();
}
template <>
struct is_proto_enum<::lobby::GameMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::GameMode>() {
  return ::lobby::GameMode_descriptor();
}
template <>
struct is_proto_enum<::lobby::GameMap> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::GameMap>() {
  return ::lobby::GameMap_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh
