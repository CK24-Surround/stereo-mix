#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_lobby_2eproto;
namespace lobby {
class ConnectionInfo;
struct ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class CreateRoomRequest;
struct CreateRoomRequestDefaultTypeInternal;
extern CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
class GetRoomListRequest;
struct GetRoomListRequestDefaultTypeInternal;
extern GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
class GetRoomListResponse;
struct GetRoomListResponseDefaultTypeInternal;
extern GetRoomListResponseDefaultTypeInternal _GetRoomListResponse_default_instance_;
class JoinRoomRequest;
struct JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class UpdateRoomInfoRequest;
struct UpdateRoomInfoRequestDefaultTypeInternal;
extern UpdateRoomInfoRequestDefaultTypeInternal _UpdateRoomInfoRequest_default_instance_;
class UpdateRoomInfoResponse;
struct UpdateRoomInfoResponseDefaultTypeInternal;
extern UpdateRoomInfoResponseDefaultTypeInternal _UpdateRoomInfoResponse_default_instance_;
}  // namespace lobby
PROTOBUF_NAMESPACE_OPEN
template <>
::lobby::ConnectionInfo* Arena::CreateMaybeMessage<::lobby::ConnectionInfo>(Arena*);
template <>
::lobby::CreateRoomRequest* Arena::CreateMaybeMessage<::lobby::CreateRoomRequest>(Arena*);
template <>
::lobby::GetRoomListRequest* Arena::CreateMaybeMessage<::lobby::GetRoomListRequest>(Arena*);
template <>
::lobby::GetRoomListResponse* Arena::CreateMaybeMessage<::lobby::GetRoomListResponse>(Arena*);
template <>
::lobby::JoinRoomRequest* Arena::CreateMaybeMessage<::lobby::JoinRoomRequest>(Arena*);
template <>
::lobby::RoomInfo* Arena::CreateMaybeMessage<::lobby::RoomInfo>(Arena*);
template <>
::lobby::UpdateRoomInfoRequest* Arena::CreateMaybeMessage<::lobby::UpdateRoomInfoRequest>(Arena*);
template <>
::lobby::UpdateRoomInfoResponse* Arena::CreateMaybeMessage<::lobby::UpdateRoomInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace lobby {
enum RoomState : int {
  ROOM_STATE_UNSPECIFIED = 0,
  ROOM_STATE_CREATING = 1,
  ROOM_STATE_WAITING = 2,
  ROOM_STATE_PLAYING = 3,
  ROOM_STATE_CLOSED = 4,
  RoomState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomState_IsValid(int value);
constexpr RoomState RoomState_MIN = static_cast<RoomState>(0);
constexpr RoomState RoomState_MAX = static_cast<RoomState>(4);
constexpr int RoomState_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RoomState_descriptor();
template <typename T>
const std::string& RoomState_Name(T value) {
  static_assert(std::is_same<T, RoomState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomState_Name().");
  return RoomState_Name(static_cast<RoomState>(value));
}
template <>
inline const std::string& RoomState_Name(RoomState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RoomState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool RoomState_Parse(absl::string_view name, RoomState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomState>(
      RoomState_descriptor(), name, value);
}
enum RoomVisibility : int {
  ROOM_VISIBILITY_UNSPECIFIED = 0,
  ROOM_VISIBILITY_PUBLIC = 1,
  ROOM_VISIBILITY_PRIVATE = 2,
  RoomVisibility_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomVisibility_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomVisibility_IsValid(int value);
constexpr RoomVisibility RoomVisibility_MIN = static_cast<RoomVisibility>(0);
constexpr RoomVisibility RoomVisibility_MAX = static_cast<RoomVisibility>(2);
constexpr int RoomVisibility_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RoomVisibility_descriptor();
template <typename T>
const std::string& RoomVisibility_Name(T value) {
  static_assert(std::is_same<T, RoomVisibility>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomVisibility_Name().");
  return RoomVisibility_Name(static_cast<RoomVisibility>(value));
}
template <>
inline const std::string& RoomVisibility_Name(RoomVisibility value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RoomVisibility_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RoomVisibility_Parse(absl::string_view name, RoomVisibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomVisibility>(
      RoomVisibility_descriptor(), name, value);
}
enum GameMode : int {
  GAMEMODE_UNSPECIFIED = 0,
  GAMEMODE_DEFAULT = 1,
  GameMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMode_IsValid(int value);
constexpr GameMode GameMode_MIN = static_cast<GameMode>(0);
constexpr GameMode GameMode_MAX = static_cast<GameMode>(1);
constexpr int GameMode_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GameMode_descriptor();
template <typename T>
const std::string& GameMode_Name(T value) {
  static_assert(std::is_same<T, GameMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMode_Name().");
  return GameMode_Name(static_cast<GameMode>(value));
}
template <>
inline const std::string& GameMode_Name(GameMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GameMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GameMode_Parse(absl::string_view name, GameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMode>(
      GameMode_descriptor(), name, value);
}
enum GameMap : int {
  GAMEMAP_UNSPECIFIED = 0,
  GAMEMAP_DEFAULT = 1,
  GameMap_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMap_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMap_IsValid(int value);
constexpr GameMap GameMap_MIN = static_cast<GameMap>(0);
constexpr GameMap GameMap_MAX = static_cast<GameMap>(1);
constexpr int GameMap_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GameMap_descriptor();
template <typename T>
const std::string& GameMap_Name(T value) {
  static_assert(std::is_same<T, GameMap>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMap_Name().");
  return GameMap_Name(static_cast<GameMap>(value));
}
template <>
inline const std::string& GameMap_Name(GameMap value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GameMap_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GameMap_Parse(absl::string_view name, GameMap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMap>(
      GameMap_descriptor(), name, value);
}
enum Team : int {
  TEAM_UNSPECIFIED = 0,
  TEAM_A = 1,
  TEAM_B = 2,
  Team_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Team_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Team_IsValid(int value);
constexpr Team Team_MIN = static_cast<Team>(0);
constexpr Team Team_MAX = static_cast<Team>(2);
constexpr int Team_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Team_descriptor();
template <typename T>
const std::string& Team_Name(T value) {
  static_assert(std::is_same<T, Team>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Team_Name().");
  return Team_Name(static_cast<Team>(value));
}
template <>
inline const std::string& Team_Name(Team value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Team_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Team_Parse(absl::string_view name, Team* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Team>(
      Team_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo& from) {
    RoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kRoomNameFieldNumber = 2,
    kVisibilityFieldNumber = 3,
    kModeFieldNumber = 4,
    kMapFieldNumber = 5,
    kMaxPlayersFieldNumber = 6,
    kCurrentPlayersFieldNumber = 7,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // string room_name = 2;
  void clear_room_name() ;
  const std::string& room_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* ptr);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // .lobby.RoomVisibility visibility = 3;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 4;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 5;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // int32 max_players = 6;
  void clear_max_players() ;
  ::int32_t max_players() const;
  void set_max_players(::int32_t value);

  private:
  ::int32_t _internal_max_players() const;
  void _internal_set_max_players(::int32_t value);

  public:
  // int32 current_players = 7;
  void clear_current_players() ;
  ::int32_t current_players() const;
  void set_current_players(::int32_t value);

  private:
  ::int32_t _internal_current_players() const;
  void _internal_set_current_players(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    int visibility_;
    int mode_;
    int map_;
    ::int32_t max_players_;
    ::int32_t current_players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class CreateRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.CreateRoomRequest) */ {
 public:
  inline CreateRoomRequest() : CreateRoomRequest(nullptr) {}
  ~CreateRoomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomRequest(const CreateRoomRequest& from);
  CreateRoomRequest(CreateRoomRequest&& from) noexcept
    : CreateRoomRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoomRequest& operator=(const CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomRequest& operator=(CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoomRequest*>(
               &_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRoomRequest& a, CreateRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoomRequest& from) {
    CreateRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.CreateRoomRequest";
  }
  protected:
  explicit CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPasswordFieldNumber = 3,
    kVisibilityFieldNumber = 2,
    kModeFieldNumber = 5,
    kMapFieldNumber = 6,
  };
  // string room_name = 1;
  void clear_room_name() ;
  const std::string& room_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* ptr);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // string password = 3;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .lobby.RoomVisibility visibility = 2;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 5;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 6;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.CreateRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    int visibility_;
    int mode_;
    int map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class JoinRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.JoinRoomRequest) */ {
 public:
  inline JoinRoomRequest() : JoinRoomRequest(nullptr) {}
  ~JoinRoomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomRequest(const JoinRoomRequest& from);
  JoinRoomRequest(JoinRoomRequest&& from) noexcept
    : JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
               &_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRoomRequest& from) {
    JoinRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.JoinRoomRequest";
  }
  protected:
  explicit JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:lobby.JoinRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class GetRoomListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.GetRoomListRequest) */ {
 public:
  inline GetRoomListRequest() : GetRoomListRequest(nullptr) {}
  ~GetRoomListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomListRequest(const GetRoomListRequest& from);
  GetRoomListRequest(GetRoomListRequest&& from) noexcept
    : GetRoomListRequest() {
    *this = ::std::move(from);
  }

  inline GetRoomListRequest& operator=(const GetRoomListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomListRequest& operator=(GetRoomListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomListRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoomListRequest*>(
               &_GetRoomListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRoomListRequest& a, GetRoomListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomListRequest& from) {
    GetRoomListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.GetRoomListRequest";
  }
  protected:
  explicit GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
    kModeFieldNumber = 3,
    kMapFieldNumber = 4,
  };
  // .lobby.RoomVisibility visibility = 1;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 3;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 4;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.GetRoomListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int visibility_;
    int mode_;
    int map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class GetRoomListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.GetRoomListResponse) */ {
 public:
  inline GetRoomListResponse() : GetRoomListResponse(nullptr) {}
  ~GetRoomListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomListResponse(const GetRoomListResponse& from);
  GetRoomListResponse(GetRoomListResponse&& from) noexcept
    : GetRoomListResponse() {
    *this = ::std::move(from);
  }

  inline GetRoomListResponse& operator=(const GetRoomListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomListResponse& operator=(GetRoomListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomListResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoomListResponse*>(
               &_GetRoomListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRoomListResponse& a, GetRoomListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomListResponse& from) {
    GetRoomListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.GetRoomListResponse";
  }
  protected:
  explicit GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .lobby.RoomInfo rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::lobby::RoomInfo* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::RoomInfo >*
      mutable_rooms();
  private:
  const ::lobby::RoomInfo& _internal_rooms(int index) const;
  ::lobby::RoomInfo* _internal_add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::RoomInfo>& _internal_rooms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::RoomInfo>* _internal_mutable_rooms();
  public:
  const ::lobby::RoomInfo& rooms(int index) const;
  ::lobby::RoomInfo* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::RoomInfo >&
      rooms() const;
  // @@protoc_insertion_point(class_scope:lobby.GetRoomListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::RoomInfo > rooms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomInfoRequest) */ {
 public:
  inline UpdateRoomInfoRequest() : UpdateRoomInfoRequest(nullptr) {}
  ~UpdateRoomInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomInfoRequest(const UpdateRoomInfoRequest& from);
  UpdateRoomInfoRequest(UpdateRoomInfoRequest&& from) noexcept
    : UpdateRoomInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoomInfoRequest& operator=(const UpdateRoomInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomInfoRequest& operator=(UpdateRoomInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomInfoRequest*>(
               &_UpdateRoomInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateRoomInfoRequest& a, UpdateRoomInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomInfoRequest& from) {
    UpdateRoomInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomInfoRequest";
  }
  protected:
  explicit UpdateRoomInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
    kVisibilityFieldNumber = 3,
    kModeFieldNumber = 4,
    kMapFieldNumber = 5,
    kCurrentPlayersFieldNumber = 7,
  };
  // string room_name = 1;
  void clear_room_name() ;
  const std::string& room_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* ptr);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // string new_password = 2;
  void clear_new_password() ;
  const std::string& new_password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_password(Arg_&& arg, Args_... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* ptr);

  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(
      const std::string& value);
  std::string* _internal_mutable_new_password();

  public:
  // .lobby.RoomVisibility visibility = 3;
  void clear_visibility() ;
  ::lobby::RoomVisibility visibility() const;
  void set_visibility(::lobby::RoomVisibility value);

  private:
  ::lobby::RoomVisibility _internal_visibility() const;
  void _internal_set_visibility(::lobby::RoomVisibility value);

  public:
  // .lobby.GameMode mode = 4;
  void clear_mode() ;
  ::lobby::GameMode mode() const;
  void set_mode(::lobby::GameMode value);

  private:
  ::lobby::GameMode _internal_mode() const;
  void _internal_set_mode(::lobby::GameMode value);

  public:
  // .lobby.GameMap map = 5;
  void clear_map() ;
  ::lobby::GameMap map() const;
  void set_map(::lobby::GameMap value);

  private:
  ::lobby::GameMap _internal_map() const;
  void _internal_set_map(::lobby::GameMap value);

  public:
  // int32 current_players = 7;
  void clear_current_players() ;
  ::int32_t current_players() const;
  void set_current_players(::int32_t value);

  private:
  ::int32_t _internal_current_players() const;
  void _internal_set_current_players(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
    int visibility_;
    int mode_;
    int map_;
    ::int32_t current_players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class UpdateRoomInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.UpdateRoomInfoResponse) */ {
 public:
  inline UpdateRoomInfoResponse() : UpdateRoomInfoResponse(nullptr) {}
  ~UpdateRoomInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateRoomInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomInfoResponse(const UpdateRoomInfoResponse& from);
  UpdateRoomInfoResponse(UpdateRoomInfoResponse&& from) noexcept
    : UpdateRoomInfoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoomInfoResponse& operator=(const UpdateRoomInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomInfoResponse& operator=(UpdateRoomInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomInfoResponse*>(
               &_UpdateRoomInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateRoomInfoResponse& a, UpdateRoomInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRoomInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRoomInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRoomInfoResponse& from) {
    UpdateRoomInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.UpdateRoomInfoResponse";
  }
  protected:
  explicit UpdateRoomInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedRoomInfoFieldNumber = 1,
  };
  // .lobby.RoomInfo updated_room_info = 1;
  bool has_updated_room_info() const;
  void clear_updated_room_info() ;
  const ::lobby::RoomInfo& updated_room_info() const;
  PROTOBUF_NODISCARD ::lobby::RoomInfo* release_updated_room_info();
  ::lobby::RoomInfo* mutable_updated_room_info();
  void set_allocated_updated_room_info(::lobby::RoomInfo* updated_room_info);
  private:
  const ::lobby::RoomInfo& _internal_updated_room_info() const;
  ::lobby::RoomInfo* _internal_mutable_updated_room_info();
  public:
  void unsafe_arena_set_allocated_updated_room_info(
      ::lobby::RoomInfo* updated_room_info);
  ::lobby::RoomInfo* unsafe_arena_release_updated_room_info();
  // @@protoc_insertion_point(class_scope:lobby.UpdateRoomInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::lobby::RoomInfo* updated_room_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};// -------------------------------------------------------------------

class ConnectionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby.ConnectionInfo) */ {
 public:
  inline ConnectionInfo() : ConnectionInfo(nullptr) {}
  ~ConnectionInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionInfo(const ConnectionInfo& from);
  ConnectionInfo(ConnectionInfo&& from) noexcept
    : ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionInfo& operator=(ConnectionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectionInfo& a, ConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionInfo& from) {
    ConnectionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lobby.ConnectionInfo";
  }
  protected:
  explicit ConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby.ConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoomInfo

// string room_id = 1;
inline void RoomInfo::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& RoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomInfo::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.room_id)
}
inline std::string* RoomInfo::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:lobby.RoomInfo.room_id)
  return _s;
}
inline const std::string& RoomInfo::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void RoomInfo::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:lobby.RoomInfo.room_id)
  return _impl_.room_id_.Release();
}
inline void RoomInfo::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.RoomInfo.room_id)
}

// string room_name = 2;
inline void RoomInfo::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& RoomInfo::room_name() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomInfo::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.room_name)
}
inline std::string* RoomInfo::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:lobby.RoomInfo.room_name)
  return _s;
}
inline const std::string& RoomInfo::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void RoomInfo::_internal_set_room_name(const std::string& value) {
  ;


  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_room_name() {
  ;
  return _impl_.room_name_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:lobby.RoomInfo.room_name)
  return _impl_.room_name_.Release();
}
inline void RoomInfo::set_allocated_room_name(std::string* value) {
  _impl_.room_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_name_.IsDefault()) {
          _impl_.room_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.RoomInfo.room_name)
}

// .lobby.RoomVisibility visibility = 3;
inline void RoomInfo::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility RoomInfo::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.visibility)
  return _internal_visibility();
}
inline void RoomInfo::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.visibility)
}
inline ::lobby::RoomVisibility RoomInfo::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void RoomInfo::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// .lobby.GameMode mode = 4;
inline void RoomInfo::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode RoomInfo::mode() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.mode)
  return _internal_mode();
}
inline void RoomInfo::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.mode)
}
inline ::lobby::GameMode RoomInfo::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void RoomInfo::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 5;
inline void RoomInfo::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap RoomInfo::map() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.map)
  return _internal_map();
}
inline void RoomInfo::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.map)
}
inline ::lobby::GameMap RoomInfo::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void RoomInfo::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// int32 max_players = 6;
inline void RoomInfo::clear_max_players() {
  _impl_.max_players_ = 0;
}
inline ::int32_t RoomInfo::max_players() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.max_players)
  return _internal_max_players();
}
inline void RoomInfo::set_max_players(::int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.max_players)
}
inline ::int32_t RoomInfo::_internal_max_players() const {
  return _impl_.max_players_;
}
inline void RoomInfo::_internal_set_max_players(::int32_t value) {
  ;
  _impl_.max_players_ = value;
}

// int32 current_players = 7;
inline void RoomInfo::clear_current_players() {
  _impl_.current_players_ = 0;
}
inline ::int32_t RoomInfo::current_players() const {
  // @@protoc_insertion_point(field_get:lobby.RoomInfo.current_players)
  return _internal_current_players();
}
inline void RoomInfo::set_current_players(::int32_t value) {
  _internal_set_current_players(value);
  // @@protoc_insertion_point(field_set:lobby.RoomInfo.current_players)
}
inline ::int32_t RoomInfo::_internal_current_players() const {
  return _impl_.current_players_;
}
inline void RoomInfo::_internal_set_current_players(::int32_t value) {
  ;
  _impl_.current_players_ = value;
}

// -------------------------------------------------------------------

// CreateRoomRequest

// string room_name = 1;
inline void CreateRoomRequest::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::room_name() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.room_name)
}
inline std::string* CreateRoomRequest::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomRequest.room_name)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void CreateRoomRequest::_internal_set_room_name(const std::string& value) {
  ;


  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_room_name() {
  ;
  return _impl_.room_name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void CreateRoomRequest::set_allocated_room_name(std::string* value) {
  _impl_.room_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_name_.IsDefault()) {
          _impl_.room_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomRequest.room_name)
}

// .lobby.RoomVisibility visibility = 2;
inline void CreateRoomRequest::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility CreateRoomRequest::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.visibility)
  return _internal_visibility();
}
inline void CreateRoomRequest::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.visibility)
}
inline ::lobby::RoomVisibility CreateRoomRequest::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void CreateRoomRequest::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// string password = 3;
inline void CreateRoomRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.password)
}
inline std::string* CreateRoomRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:lobby.CreateRoomRequest.password)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CreateRoomRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:lobby.CreateRoomRequest.password)
  return _impl_.password_.Release();
}
inline void CreateRoomRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.CreateRoomRequest.password)
}

// .lobby.GameMode mode = 5;
inline void CreateRoomRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode CreateRoomRequest::mode() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.mode)
  return _internal_mode();
}
inline void CreateRoomRequest::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.mode)
}
inline ::lobby::GameMode CreateRoomRequest::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void CreateRoomRequest::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 6;
inline void CreateRoomRequest::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap CreateRoomRequest::map() const {
  // @@protoc_insertion_point(field_get:lobby.CreateRoomRequest.map)
  return _internal_map();
}
inline void CreateRoomRequest::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.CreateRoomRequest.map)
}
inline ::lobby::GameMap CreateRoomRequest::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void CreateRoomRequest::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// -------------------------------------------------------------------

// JoinRoomRequest

// string room_id = 1;
inline void JoinRoomRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomRequest.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.JoinRoomRequest.room_id)
}
inline std::string* JoinRoomRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomRequest.room_id)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void JoinRoomRequest::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void JoinRoomRequest::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomRequest.room_id)
}

// string password = 2;
inline void JoinRoomRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:lobby.JoinRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.JoinRoomRequest.password)
}
inline std::string* JoinRoomRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:lobby.JoinRoomRequest.password)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void JoinRoomRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:lobby.JoinRoomRequest.password)
  return _impl_.password_.Release();
}
inline void JoinRoomRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.JoinRoomRequest.password)
}

// -------------------------------------------------------------------

// GetRoomListRequest

// .lobby.RoomVisibility visibility = 1;
inline void GetRoomListRequest::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility GetRoomListRequest::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.visibility)
  return _internal_visibility();
}
inline void GetRoomListRequest::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.visibility)
}
inline ::lobby::RoomVisibility GetRoomListRequest::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void GetRoomListRequest::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// .lobby.GameMode mode = 3;
inline void GetRoomListRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode GetRoomListRequest::mode() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.mode)
  return _internal_mode();
}
inline void GetRoomListRequest::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.mode)
}
inline ::lobby::GameMode GetRoomListRequest::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void GetRoomListRequest::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 4;
inline void GetRoomListRequest::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap GetRoomListRequest::map() const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListRequest.map)
  return _internal_map();
}
inline void GetRoomListRequest::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.GetRoomListRequest.map)
}
inline ::lobby::GameMap GetRoomListRequest::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void GetRoomListRequest::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// -------------------------------------------------------------------

// GetRoomListResponse

// repeated .lobby.RoomInfo rooms = 1;
inline int GetRoomListResponse::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int GetRoomListResponse::rooms_size() const {
  return _internal_rooms_size();
}
inline void GetRoomListResponse::clear_rooms() {
  _internal_mutable_rooms()->Clear();
}
inline ::lobby::RoomInfo* GetRoomListResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:lobby.GetRoomListResponse.rooms)
  return _internal_mutable_rooms()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::RoomInfo >*
GetRoomListResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:lobby.GetRoomListResponse.rooms)
  return _internal_mutable_rooms();
}
inline const ::lobby::RoomInfo& GetRoomListResponse::_internal_rooms(int index) const {
  return _internal_rooms().Get(index);
}
inline const ::lobby::RoomInfo& GetRoomListResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:lobby.GetRoomListResponse.rooms)
  return _internal_rooms(index);
}
inline ::lobby::RoomInfo* GetRoomListResponse::_internal_add_rooms() {
  return _internal_mutable_rooms()->Add();
}
inline ::lobby::RoomInfo* GetRoomListResponse::add_rooms() {
  ::lobby::RoomInfo* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:lobby.GetRoomListResponse.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lobby::RoomInfo >&
GetRoomListResponse::rooms() const {
  // @@protoc_insertion_point(field_list:lobby.GetRoomListResponse.rooms)
  return _internal_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::RoomInfo>&
GetRoomListResponse::_internal_rooms() const {
  return _impl_.rooms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::lobby::RoomInfo>*
GetRoomListResponse::_internal_mutable_rooms() {
  return &_impl_.rooms_;
}

// -------------------------------------------------------------------

// UpdateRoomInfoRequest

// string room_name = 1;
inline void UpdateRoomInfoRequest::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& UpdateRoomInfoRequest::room_name() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateRoomInfoRequest::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.room_name)
}
inline std::string* UpdateRoomInfoRequest::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:lobby.UpdateRoomInfoRequest.room_name)
  return _s;
}
inline const std::string& UpdateRoomInfoRequest::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void UpdateRoomInfoRequest::_internal_set_room_name(const std::string& value) {
  ;


  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateRoomInfoRequest::_internal_mutable_room_name() {
  ;
  return _impl_.room_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateRoomInfoRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:lobby.UpdateRoomInfoRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void UpdateRoomInfoRequest::set_allocated_room_name(std::string* value) {
  _impl_.room_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_name_.IsDefault()) {
          _impl_.room_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.UpdateRoomInfoRequest.room_name)
}

// string new_password = 2;
inline void UpdateRoomInfoRequest::clear_new_password() {
  _impl_.new_password_.ClearToEmpty();
}
inline const std::string& UpdateRoomInfoRequest::new_password() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.new_password)
  return _internal_new_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateRoomInfoRequest::set_new_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.new_password)
}
inline std::string* UpdateRoomInfoRequest::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:lobby.UpdateRoomInfoRequest.new_password)
  return _s;
}
inline const std::string& UpdateRoomInfoRequest::_internal_new_password() const {
  return _impl_.new_password_.Get();
}
inline void UpdateRoomInfoRequest::_internal_set_new_password(const std::string& value) {
  ;


  _impl_.new_password_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateRoomInfoRequest::_internal_mutable_new_password() {
  ;
  return _impl_.new_password_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateRoomInfoRequest::release_new_password() {
  // @@protoc_insertion_point(field_release:lobby.UpdateRoomInfoRequest.new_password)
  return _impl_.new_password_.Release();
}
inline void UpdateRoomInfoRequest::set_allocated_new_password(std::string* value) {
  _impl_.new_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_password_.IsDefault()) {
          _impl_.new_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.UpdateRoomInfoRequest.new_password)
}

// .lobby.RoomVisibility visibility = 3;
inline void UpdateRoomInfoRequest::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::lobby::RoomVisibility UpdateRoomInfoRequest::visibility() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.visibility)
  return _internal_visibility();
}
inline void UpdateRoomInfoRequest::set_visibility(::lobby::RoomVisibility value) {
   _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.visibility)
}
inline ::lobby::RoomVisibility UpdateRoomInfoRequest::_internal_visibility() const {
  return static_cast<::lobby::RoomVisibility>(_impl_.visibility_);
}
inline void UpdateRoomInfoRequest::_internal_set_visibility(::lobby::RoomVisibility value) {
  ;
  _impl_.visibility_ = value;
}

// .lobby.GameMode mode = 4;
inline void UpdateRoomInfoRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::lobby::GameMode UpdateRoomInfoRequest::mode() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.mode)
  return _internal_mode();
}
inline void UpdateRoomInfoRequest::set_mode(::lobby::GameMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.mode)
}
inline ::lobby::GameMode UpdateRoomInfoRequest::_internal_mode() const {
  return static_cast<::lobby::GameMode>(_impl_.mode_);
}
inline void UpdateRoomInfoRequest::_internal_set_mode(::lobby::GameMode value) {
  ;
  _impl_.mode_ = value;
}

// .lobby.GameMap map = 5;
inline void UpdateRoomInfoRequest::clear_map() {
  _impl_.map_ = 0;
}
inline ::lobby::GameMap UpdateRoomInfoRequest::map() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.map)
  return _internal_map();
}
inline void UpdateRoomInfoRequest::set_map(::lobby::GameMap value) {
   _internal_set_map(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.map)
}
inline ::lobby::GameMap UpdateRoomInfoRequest::_internal_map() const {
  return static_cast<::lobby::GameMap>(_impl_.map_);
}
inline void UpdateRoomInfoRequest::_internal_set_map(::lobby::GameMap value) {
  ;
  _impl_.map_ = value;
}

// int32 current_players = 7;
inline void UpdateRoomInfoRequest::clear_current_players() {
  _impl_.current_players_ = 0;
}
inline ::int32_t UpdateRoomInfoRequest::current_players() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoRequest.current_players)
  return _internal_current_players();
}
inline void UpdateRoomInfoRequest::set_current_players(::int32_t value) {
  _internal_set_current_players(value);
  // @@protoc_insertion_point(field_set:lobby.UpdateRoomInfoRequest.current_players)
}
inline ::int32_t UpdateRoomInfoRequest::_internal_current_players() const {
  return _impl_.current_players_;
}
inline void UpdateRoomInfoRequest::_internal_set_current_players(::int32_t value) {
  ;
  _impl_.current_players_ = value;
}

// -------------------------------------------------------------------

// UpdateRoomInfoResponse

// .lobby.RoomInfo updated_room_info = 1;
inline bool UpdateRoomInfoResponse::has_updated_room_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_room_info_ != nullptr);
  return value;
}
inline void UpdateRoomInfoResponse::clear_updated_room_info() {
  if (_impl_.updated_room_info_ != nullptr) _impl_.updated_room_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lobby::RoomInfo& UpdateRoomInfoResponse::_internal_updated_room_info() const {
  const ::lobby::RoomInfo* p = _impl_.updated_room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::lobby::RoomInfo&>(
      ::lobby::_RoomInfo_default_instance_);
}
inline const ::lobby::RoomInfo& UpdateRoomInfoResponse::updated_room_info() const {
  // @@protoc_insertion_point(field_get:lobby.UpdateRoomInfoResponse.updated_room_info)
  return _internal_updated_room_info();
}
inline void UpdateRoomInfoResponse::unsafe_arena_set_allocated_updated_room_info(
    ::lobby::RoomInfo* updated_room_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_room_info_);
  }
  _impl_.updated_room_info_ = updated_room_info;
  if (updated_room_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lobby.UpdateRoomInfoResponse.updated_room_info)
}
inline ::lobby::RoomInfo* UpdateRoomInfoResponse::release_updated_room_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomInfo* temp = _impl_.updated_room_info_;
  _impl_.updated_room_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lobby::RoomInfo* UpdateRoomInfoResponse::unsafe_arena_release_updated_room_info() {
  // @@protoc_insertion_point(field_release:lobby.UpdateRoomInfoResponse.updated_room_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lobby::RoomInfo* temp = _impl_.updated_room_info_;
  _impl_.updated_room_info_ = nullptr;
  return temp;
}
inline ::lobby::RoomInfo* UpdateRoomInfoResponse::_internal_mutable_updated_room_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_room_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lobby::RoomInfo>(GetArenaForAllocation());
    _impl_.updated_room_info_ = p;
  }
  return _impl_.updated_room_info_;
}
inline ::lobby::RoomInfo* UpdateRoomInfoResponse::mutable_updated_room_info() {
  ::lobby::RoomInfo* _msg = _internal_mutable_updated_room_info();
  // @@protoc_insertion_point(field_mutable:lobby.UpdateRoomInfoResponse.updated_room_info)
  return _msg;
}
inline void UpdateRoomInfoResponse::set_allocated_updated_room_info(::lobby::RoomInfo* updated_room_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.updated_room_info_;
  }
  if (updated_room_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(updated_room_info);
    if (message_arena != submessage_arena) {
      updated_room_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_room_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_room_info_ = updated_room_info;
  // @@protoc_insertion_point(field_set_allocated:lobby.UpdateRoomInfoResponse.updated_room_info)
}

// -------------------------------------------------------------------

// ConnectionInfo

// string host = 1;
inline void ConnectionInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ConnectionInfo::host() const {
  // @@protoc_insertion_point(field_get:lobby.ConnectionInfo.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectionInfo::set_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby.ConnectionInfo.host)
}
inline std::string* ConnectionInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:lobby.ConnectionInfo.host)
  return _s;
}
inline const std::string& ConnectionInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void ConnectionInfo::_internal_set_host(const std::string& value) {
  ;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionInfo::_internal_mutable_host() {
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* ConnectionInfo::release_host() {
  // @@protoc_insertion_point(field_release:lobby.ConnectionInfo.host)
  return _impl_.host_.Release();
}
inline void ConnectionInfo::set_allocated_host(std::string* value) {
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby.ConnectionInfo.host)
}

// int32 port = 2;
inline void ConnectionInfo::clear_port() {
  _impl_.port_ = 0;
}
inline ::int32_t ConnectionInfo::port() const {
  // @@protoc_insertion_point(field_get:lobby.ConnectionInfo.port)
  return _internal_port();
}
inline void ConnectionInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:lobby.ConnectionInfo.port)
}
inline ::int32_t ConnectionInfo::_internal_port() const {
  return _impl_.port_;
}
inline void ConnectionInfo::_internal_set_port(::int32_t value) {
  ;
  _impl_.port_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lobby


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::lobby::RoomState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::RoomState>() {
  return ::lobby::RoomState_descriptor();
}
template <>
struct is_proto_enum<::lobby::RoomVisibility> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::RoomVisibility>() {
  return ::lobby::RoomVisibility_descriptor();
}
template <>
struct is_proto_enum<::lobby::GameMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::GameMode>() {
  return ::lobby::GameMode_descriptor();
}
template <>
struct is_proto_enum<::lobby::GameMap> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::GameMap>() {
  return ::lobby::GameMap_descriptor();
}
template <>
struct is_proto_enum<::lobby::Team> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lobby::Team>() {
  return ::lobby::Team_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto_2epb_2eh
