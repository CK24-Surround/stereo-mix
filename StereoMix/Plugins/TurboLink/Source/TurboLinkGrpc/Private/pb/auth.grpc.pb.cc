// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace auth {

static const char* AuthService_method_names[] = {
  "/auth.AuthService/GuestLogin",
  "/auth.AuthService/RegisterGameServer",
};

std::unique_ptr< AuthService::Stub> AuthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthService::Stub> stub(new AuthService::Stub(channel, options));
  return stub;
}

AuthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GuestLogin_(AuthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterGameServer_(AuthService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthService::Stub::GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::auth::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::auth::GuestLoginRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GuestLogin_, context, request, response);
}

void AuthService::Stub::async::GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::auth::GuestLoginRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GuestLogin_, context, request, response, std::move(f));
}

void AuthService::Stub::async::GuestLogin(::grpc::ClientContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GuestLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auth::Response>* AuthService::Stub::PrepareAsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::auth::Response, ::auth::GuestLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GuestLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::auth::Response>* AuthService::Stub::AsyncGuestLoginRaw(::grpc::ClientContext* context, const ::auth::GuestLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGuestLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthService::Stub::RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::auth::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::auth::RegisterGameServerRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterGameServer_, context, request, response);
}

void AuthService::Stub::async::RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::auth::RegisterGameServerRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGameServer_, context, request, response, std::move(f));
}

void AuthService::Stub::async::RegisterGameServer(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGameServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auth::Response>* AuthService::Stub::PrepareAsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::auth::Response, ::auth::RegisterGameServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterGameServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::auth::Response>* AuthService::Stub::AsyncRegisterGameServerRaw(::grpc::ClientContext* context, const ::auth::RegisterGameServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterGameServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::auth::GuestLoginRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::auth::GuestLoginRequest* req,
             ::auth::Response* resp) {
               return service->GuestLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::auth::RegisterGameServerRequest, ::auth::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::auth::RegisterGameServerRequest* req,
             ::auth::Response* resp) {
               return service->RegisterGameServer(ctx, req, resp);
             }, this)));
}

AuthService::Service::~Service() {
}

::grpc::Status AuthService::Service::GuestLogin(::grpc::ServerContext* context, const ::auth::GuestLoginRequest* request, ::auth::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::RegisterGameServer(::grpc::ServerContext* context, const ::auth::RegisterGameServerRequest* request, ::auth::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace auth

