#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#include "lobby.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace lobby {
template <typename>
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.room_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.visibility_)*/ 0

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.map_)*/ 0

  , /*decltype(_impl_.max_players_)*/ 0

  , /*decltype(_impl_.current_players_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateRoomRequest::CreateRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.visibility_)*/ 0

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.map_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomRequestDefaultTypeInternal() {}
  union {
    CreateRoomRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR JoinRoomRequest::JoinRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinRoomRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinRoomRequestDefaultTypeInternal() {}
  union {
    JoinRoomRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetRoomListRequest::GetRoomListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.visibility_)*/ 0

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.map_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoomListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoomListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoomListRequestDefaultTypeInternal() {}
  union {
    GetRoomListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetRoomListResponse::GetRoomListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoomListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoomListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoomListResponseDefaultTypeInternal() {}
  union {
    GetRoomListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoomListResponseDefaultTypeInternal _GetRoomListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateRoomInfoRequest::UpdateRoomInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.visibility_)*/ 0

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.map_)*/ 0

  , /*decltype(_impl_.current_players_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRoomInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRoomInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRoomInfoRequestDefaultTypeInternal() {}
  union {
    UpdateRoomInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRoomInfoRequestDefaultTypeInternal _UpdateRoomInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateRoomInfoResponse::UpdateRoomInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.updated_room_info_)*/nullptr} {}
struct UpdateRoomInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRoomInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRoomInfoResponseDefaultTypeInternal() {}
  union {
    UpdateRoomInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRoomInfoResponseDefaultTypeInternal _UpdateRoomInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConnectionInfo::ConnectionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionInfoDefaultTypeInternal() {}
  union {
    ConnectionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
}  // namespace lobby
static ::_pb::Metadata file_level_metadata_lobby_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lobby_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_lobby_2eproto = nullptr;
const ::uint32_t TableStruct_lobby_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.room_id_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.room_name_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.visibility_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.map_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.max_players_),
    PROTOBUF_FIELD_OFFSET(::lobby::RoomInfo, _impl_.current_players_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _impl_.room_name_),
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _impl_.visibility_),
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::lobby::CreateRoomRequest, _impl_.map_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::JoinRoomRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::JoinRoomRequest, _impl_.room_id_),
    PROTOBUF_FIELD_OFFSET(::lobby::JoinRoomRequest, _impl_.password_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListRequest, _impl_.visibility_),
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListRequest, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListRequest, _impl_.map_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::GetRoomListResponse, _impl_.rooms_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.room_name_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.new_password_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.visibility_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.map_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoRequest, _impl_.current_players_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::UpdateRoomInfoResponse, _impl_.updated_room_info_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lobby::ConnectionInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::lobby::ConnectionInfo, _impl_.host_),
    PROTOBUF_FIELD_OFFSET(::lobby::ConnectionInfo, _impl_.port_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::lobby::RoomInfo)},
        { 15, -1, -1, sizeof(::lobby::CreateRoomRequest)},
        { 28, -1, -1, sizeof(::lobby::JoinRoomRequest)},
        { 38, -1, -1, sizeof(::lobby::GetRoomListRequest)},
        { 49, -1, -1, sizeof(::lobby::GetRoomListResponse)},
        { 58, -1, -1, sizeof(::lobby::UpdateRoomInfoRequest)},
        { 72, 81, -1, sizeof(::lobby::UpdateRoomInfoResponse)},
        { 82, -1, -1, sizeof(::lobby::ConnectionInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::lobby::_RoomInfo_default_instance_._instance,
    &::lobby::_CreateRoomRequest_default_instance_._instance,
    &::lobby::_JoinRoomRequest_default_instance_._instance,
    &::lobby::_GetRoomListRequest_default_instance_._instance,
    &::lobby::_GetRoomListResponse_default_instance_._instance,
    &::lobby::_UpdateRoomInfoRequest_default_instance_._instance,
    &::lobby::_UpdateRoomInfoResponse_default_instance_._instance,
    &::lobby::_ConnectionInfo_default_instance_._instance,
};
const char descriptor_table_protodef_lobby_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013lobby.proto\022\005lobby\"\303\001\n\010RoomInfo\022\017\n\007roo"
    "m_id\030\001 \001(\t\022\021\n\troom_name\030\002 \001(\t\022)\n\nvisibil"
    "ity\030\003 \001(\0162\025.lobby.RoomVisibility\022\035\n\004mode"
    "\030\004 \001(\0162\017.lobby.GameMode\022\033\n\003map\030\005 \001(\0162\016.l"
    "obby.GameMap\022\023\n\013max_players\030\006 \001(\005\022\027\n\017cur"
    "rent_players\030\007 \001(\005\"\237\001\n\021CreateRoomRequest"
    "\022\021\n\troom_name\030\001 \001(\t\022)\n\nvisibility\030\002 \001(\0162"
    "\025.lobby.RoomVisibility\022\020\n\010password\030\003 \001(\t"
    "\022\035\n\004mode\030\005 \001(\0162\017.lobby.GameMode\022\033\n\003map\030\006"
    " \001(\0162\016.lobby.GameMap\"4\n\017JoinRoomRequest\022"
    "\017\n\007room_id\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"{\n\022Ge"
    "tRoomListRequest\022)\n\nvisibility\030\001 \001(\0162\025.l"
    "obby.RoomVisibility\022\035\n\004mode\030\003 \001(\0162\017.lobb"
    "y.GameMode\022\033\n\003map\030\004 \001(\0162\016.lobby.GameMap\""
    "5\n\023GetRoomListResponse\022\036\n\005rooms\030\001 \003(\0132\017."
    "lobby.RoomInfo\"\300\001\n\025UpdateRoomInfoRequest"
    "\022\021\n\troom_name\030\001 \001(\t\022\024\n\014new_password\030\002 \001("
    "\t\022)\n\nvisibility\030\003 \001(\0162\025.lobby.RoomVisibi"
    "lity\022\035\n\004mode\030\004 \001(\0162\017.lobby.GameMode\022\033\n\003m"
    "ap\030\005 \001(\0162\016.lobby.GameMap\022\027\n\017current_play"
    "ers\030\007 \001(\005\"D\n\026UpdateRoomInfoResponse\022*\n\021u"
    "pdated_room_info\030\001 \001(\0132\017.lobby.RoomInfo\""
    ",\n\016ConnectionInfo\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030"
    "\002 \001(\005*\207\001\n\tRoomState\022\032\n\026ROOM_STATE_UNSPEC"
    "IFIED\020\000\022\027\n\023ROOM_STATE_CREATING\020\001\022\026\n\022ROOM"
    "_STATE_WAITING\020\002\022\026\n\022ROOM_STATE_PLAYING\020\003"
    "\022\025\n\021ROOM_STATE_CLOSED\020\004*j\n\016RoomVisibilit"
    "y\022\037\n\033ROOM_VISIBILITY_UNSPECIFIED\020\000\022\032\n\026RO"
    "OM_VISIBILITY_PUBLIC\020\001\022\033\n\027ROOM_VISIBILIT"
    "Y_PRIVATE\020\002*:\n\010GameMode\022\030\n\024GAMEMODE_UNSP"
    "ECIFIED\020\000\022\024\n\020GAMEMODE_DEFAULT\020\001*7\n\007GameM"
    "ap\022\027\n\023GAMEMAP_UNSPECIFIED\020\000\022\023\n\017GAMEMAP_D"
    "EFAULT\020\001*4\n\004Team\022\024\n\020TEAM_UNSPECIFIED\020\000\022\n"
    "\n\006TEAM_A\020\001\022\n\n\006TEAM_B\020\0022\235\002\n\014LobbyService\022"
    "=\n\nCreateRoom\022\030.lobby.CreateRoomRequest\032"
    "\025.lobby.ConnectionInfo\0229\n\010JoinRoom\022\026.lob"
    "by.JoinRoomRequest\032\025.lobby.ConnectionInf"
    "o\022D\n\013GetRoomList\022\031.lobby.GetRoomListRequ"
    "est\032\032.lobby.GetRoomListResponse\022M\n\016Updat"
    "eRoomInfo\022\034.lobby.UpdateRoomInfoRequest\032"
    "\035.lobby.UpdateRoomInfoResponseB\025\370\001\001\252\002\017St"
    "ereoMix.Lobbyb\006proto3"
};
static ::absl::once_flag descriptor_table_lobby_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lobby_2eproto = {
    false,
    false,
    1661,
    descriptor_table_protodef_lobby_2eproto,
    "lobby.proto",
    &descriptor_table_lobby_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_lobby_2eproto::offsets,
    file_level_metadata_lobby_2eproto,
    file_level_enum_descriptors_lobby_2eproto,
    file_level_service_descriptors_lobby_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lobby_2eproto_getter() {
  return &descriptor_table_lobby_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lobby_2eproto(&descriptor_table_lobby_2eproto);
namespace lobby {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lobby_2eproto);
  return file_level_enum_descriptors_lobby_2eproto[0];
}
bool RoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lobby_2eproto);
  return file_level_enum_descriptors_lobby_2eproto[1];
}
bool RoomVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lobby_2eproto);
  return file_level_enum_descriptors_lobby_2eproto[2];
}
bool GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lobby_2eproto);
  return file_level_enum_descriptors_lobby_2eproto[3];
}
bool GameMap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Team_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lobby_2eproto);
  return file_level_enum_descriptors_lobby_2eproto[4];
}
bool Team_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class RoomInfo::_Internal {
 public:
};

RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_) {}

    , decltype(_impl_.room_name_) {}

    , decltype(_impl_.visibility_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.map_) {}

    , decltype(_impl_.max_players_) {}

    , decltype(_impl_.current_players_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), _this->GetArenaForAllocation());
  }
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.visibility_, &from._impl_.visibility_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.current_players_) -
    reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.current_players_));
  // @@protoc_insertion_point(copy_constructor:lobby.RoomInfo)
}

inline void RoomInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_) {}

    , decltype(_impl_.room_name_) {}

    , decltype(_impl_.visibility_) { 0 }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.map_) { 0 }

    , decltype(_impl_.max_players_) { 0 }

    , decltype(_impl_.current_players_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:lobby.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.Destroy();
  _impl_.room_name_.Destroy();
}

void RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.RoomInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.ClearToEmpty();
  _impl_.room_name_.ClearToEmpty();
  ::memset(&_impl_.visibility_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.current_players_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.current_players_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.RoomInfo.room_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string room_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.RoomInfo.room_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.RoomVisibility visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::lobby::RoomVisibility>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMode mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::lobby::GameMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMap map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::lobby::GameMap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 max_players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.current_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RoomInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.RoomInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    const std::string& _s = this->_internal_room_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.RoomInfo.room_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    const std::string& _s = this->_internal_room_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.RoomInfo.room_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .lobby.RoomVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_visibility(), target);
  }

  // .lobby.GameMode mode = 4;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_mode(), target);
  }

  // .lobby.GameMap map = 5;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_map(), target);
  }

  // int32 max_players = 6;
  if (this->_internal_max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_max_players(), target);
  }

  // int32 current_players = 7;
  if (this->_internal_current_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_current_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.RoomInfo)
  return target;
}

::size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.RoomInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_room_id());
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_room_name());
  }

  // .lobby.RoomVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .lobby.GameMode mode = 4;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .lobby.GameMap map = 5;
  if (this->_internal_map() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  // int32 max_players = 6;
  if (this->_internal_max_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_players());
  }

  // int32 current_players = 7;
  if (this->_internal_current_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_players());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }


void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.RoomInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  if (from._internal_max_players() != 0) {
    _this->_internal_set_max_players(from._internal_max_players());
  }
  if (from._internal_current_players() != 0) {
    _this->_internal_set_current_players(from._internal_current_players());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_id_, lhs_arena,
                                       &other->_impl_.room_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, lhs_arena,
                                       &other->_impl_.room_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.current_players_)
      + sizeof(RoomInfo::_impl_.current_players_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.visibility_)>(
          reinterpret_cast<char*>(&_impl_.visibility_),
          reinterpret_cast<char*>(&other->_impl_.visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[0]);
}
// ===================================================================

class CreateRoomRequest::_Internal {
 public:
};

CreateRoomRequest::CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.visibility_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.map_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.visibility_, &from._impl_.visibility_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.map_) -
    reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.map_));
  // @@protoc_insertion_point(copy_constructor:lobby.CreateRoomRequest)
}

inline void CreateRoomRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.visibility_) { 0 }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.map_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:lobby.CreateRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.password_.Destroy();
}

void CreateRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.CreateRoomRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.visibility_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.map_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.CreateRoomRequest.room_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.RoomVisibility visibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::lobby::RoomVisibility>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.CreateRoomRequest.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::lobby::GameMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMap map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::lobby::GameMap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateRoomRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.CreateRoomRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    const std::string& _s = this->_internal_room_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.CreateRoomRequest.room_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .lobby.RoomVisibility visibility = 2;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_visibility(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.CreateRoomRequest.password");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .lobby.GameMode mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_mode(), target);
  }

  // .lobby.GameMap map = 6;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.CreateRoomRequest)
  return target;
}

::size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.CreateRoomRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_room_name());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // .lobby.RoomVisibility visibility = 2;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .lobby.GameMode mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .lobby.GameMap map = 6;
  if (this->_internal_map() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomRequest::GetClassData() const { return &_class_data_; }


void CreateRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.CreateRoomRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, lhs_arena,
                                       &other->_impl_.room_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.map_)
      + sizeof(CreateRoomRequest::_impl_.map_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.visibility_)>(
          reinterpret_cast<char*>(&_impl_.visibility_),
          reinterpret_cast<char*>(&other->_impl_.visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[1]);
}
// ===================================================================

class JoinRoomRequest::_Internal {
 public:
};

JoinRoomRequest::JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.JoinRoomRequest)
}
JoinRoomRequest::JoinRoomRequest(const JoinRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lobby.JoinRoomRequest)
}

inline void JoinRoomRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinRoomRequest::~JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:lobby.JoinRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinRoomRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.Destroy();
  _impl_.password_.Destroy();
}

void JoinRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.JoinRoomRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.JoinRoomRequest.room_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.JoinRoomRequest.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* JoinRoomRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.JoinRoomRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    const std::string& _s = this->_internal_room_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.JoinRoomRequest.room_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.JoinRoomRequest.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.JoinRoomRequest)
  return target;
}

::size_t JoinRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.JoinRoomRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_room_id());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomRequest::GetClassData() const { return &_class_data_; }


void JoinRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinRoomRequest*>(&to_msg);
  auto& from = static_cast<const JoinRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.JoinRoomRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomRequest::CopyFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomRequest::IsInitialized() const {
  return true;
}

void JoinRoomRequest::InternalSwap(JoinRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_id_, lhs_arena,
                                       &other->_impl_.room_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[2]);
}
// ===================================================================

class GetRoomListRequest::_Internal {
 public:
};

GetRoomListRequest::GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.GetRoomListRequest)
}
GetRoomListRequest::GetRoomListRequest(const GetRoomListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lobby.GetRoomListRequest)
}

inline void GetRoomListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.visibility_) { 0 }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.map_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRoomListRequest::~GetRoomListRequest() {
  // @@protoc_insertion_point(destructor:lobby.GetRoomListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoomListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRoomListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoomListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.GetRoomListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.visibility_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.map_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoomListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lobby.RoomVisibility visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::lobby::RoomVisibility>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::lobby::GameMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMap map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::lobby::GameMap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRoomListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.GetRoomListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lobby.RoomVisibility visibility = 1;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_visibility(), target);
  }

  // .lobby.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  // .lobby.GameMap map = 4;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.GetRoomListRequest)
  return target;
}

::size_t GetRoomListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.GetRoomListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lobby.RoomVisibility visibility = 1;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .lobby.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .lobby.GameMap map = 4;
  if (this->_internal_map() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoomListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoomListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoomListRequest::GetClassData() const { return &_class_data_; }


void GetRoomListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoomListRequest*>(&to_msg);
  auto& from = static_cast<const GetRoomListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.GetRoomListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoomListRequest::CopyFrom(const GetRoomListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.GetRoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListRequest::IsInitialized() const {
  return true;
}

void GetRoomListRequest::InternalSwap(GetRoomListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRoomListRequest, _impl_.map_)
      + sizeof(GetRoomListRequest::_impl_.map_)
      - PROTOBUF_FIELD_OFFSET(GetRoomListRequest, _impl_.visibility_)>(
          reinterpret_cast<char*>(&_impl_.visibility_),
          reinterpret_cast<char*>(&other->_impl_.visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoomListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[3]);
}
// ===================================================================

class GetRoomListResponse::_Internal {
 public:
};

GetRoomListResponse::GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.GetRoomListResponse)
}
GetRoomListResponse::GetRoomListResponse(const GetRoomListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRoomListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){from._impl_.rooms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lobby.GetRoomListResponse)
}

inline void GetRoomListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRoomListResponse::~GetRoomListResponse() {
  // @@protoc_insertion_point(destructor:lobby.GetRoomListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoomListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rooms()->~RepeatedPtrField();
}

void GetRoomListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoomListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.GetRoomListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rooms()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoomListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lobby.RoomInfo rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRoomListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.GetRoomListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lobby.RoomInfo rooms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.GetRoomListResponse)
  return target;
}

::size_t GetRoomListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.GetRoomListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lobby.RoomInfo rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_internal_rooms()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoomListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoomListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoomListResponse::GetClassData() const { return &_class_data_; }


void GetRoomListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoomListResponse*>(&to_msg);
  auto& from = static_cast<const GetRoomListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.GetRoomListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rooms()->MergeFrom(from._internal_rooms());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoomListResponse::CopyFrom(const GetRoomListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.GetRoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListResponse::IsInitialized() const {
  return true;
}

void GetRoomListResponse::InternalSwap(GetRoomListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rooms()->InternalSwap(other->_internal_mutable_rooms());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoomListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[4]);
}
// ===================================================================

class UpdateRoomInfoRequest::_Internal {
 public:
};

UpdateRoomInfoRequest::UpdateRoomInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.UpdateRoomInfoRequest)
}
UpdateRoomInfoRequest::UpdateRoomInfoRequest(const UpdateRoomInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRoomInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_) {}

    , decltype(_impl_.new_password_) {}

    , decltype(_impl_.visibility_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.map_) {}

    , decltype(_impl_.current_players_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.visibility_, &from._impl_.visibility_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.current_players_) -
    reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.current_players_));
  // @@protoc_insertion_point(copy_constructor:lobby.UpdateRoomInfoRequest)
}

inline void UpdateRoomInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_) {}

    , decltype(_impl_.new_password_) {}

    , decltype(_impl_.visibility_) { 0 }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.map_) { 0 }

    , decltype(_impl_.current_players_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateRoomInfoRequest::~UpdateRoomInfoRequest() {
  // @@protoc_insertion_point(destructor:lobby.UpdateRoomInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRoomInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  _impl_.new_password_.Destroy();
}

void UpdateRoomInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRoomInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.UpdateRoomInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  ::memset(&_impl_.visibility_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.current_players_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.current_players_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRoomInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.UpdateRoomInfoRequest.room_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.UpdateRoomInfoRequest.new_password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.RoomVisibility visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::lobby::RoomVisibility>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMode mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::lobby::GameMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .lobby.GameMap map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::lobby::GameMap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.current_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateRoomInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.UpdateRoomInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    const std::string& _s = this->_internal_room_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.UpdateRoomInfoRequest.room_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    const std::string& _s = this->_internal_new_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.UpdateRoomInfoRequest.new_password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .lobby.RoomVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_visibility(), target);
  }

  // .lobby.GameMode mode = 4;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_mode(), target);
  }

  // .lobby.GameMap map = 5;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_map(), target);
  }

  // int32 current_players = 7;
  if (this->_internal_current_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_current_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.UpdateRoomInfoRequest)
  return target;
}

::size_t UpdateRoomInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.UpdateRoomInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_room_name());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_password());
  }

  // .lobby.RoomVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .lobby.GameMode mode = 4;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .lobby.GameMap map = 5;
  if (this->_internal_map() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  // int32 current_players = 7;
  if (this->_internal_current_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_players());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRoomInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRoomInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRoomInfoRequest::GetClassData() const { return &_class_data_; }


void UpdateRoomInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRoomInfoRequest*>(&to_msg);
  auto& from = static_cast<const UpdateRoomInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.UpdateRoomInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  if (from._internal_current_players() != 0) {
    _this->_internal_set_current_players(from._internal_current_players());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRoomInfoRequest::CopyFrom(const UpdateRoomInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.UpdateRoomInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomInfoRequest::IsInitialized() const {
  return true;
}

void UpdateRoomInfoRequest::InternalSwap(UpdateRoomInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, lhs_arena,
                                       &other->_impl_.room_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_password_, lhs_arena,
                                       &other->_impl_.new_password_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRoomInfoRequest, _impl_.current_players_)
      + sizeof(UpdateRoomInfoRequest::_impl_.current_players_)
      - PROTOBUF_FIELD_OFFSET(UpdateRoomInfoRequest, _impl_.visibility_)>(
          reinterpret_cast<char*>(&_impl_.visibility_),
          reinterpret_cast<char*>(&other->_impl_.visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRoomInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[5]);
}
// ===================================================================

class UpdateRoomInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateRoomInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateRoomInfoResponse, _impl_._has_bits_);
  static const ::lobby::RoomInfo& updated_room_info(const UpdateRoomInfoResponse* msg);
  static void set_has_updated_room_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::lobby::RoomInfo&
UpdateRoomInfoResponse::_Internal::updated_room_info(const UpdateRoomInfoResponse* msg) {
  return *msg->_impl_.updated_room_info_;
}
UpdateRoomInfoResponse::UpdateRoomInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.UpdateRoomInfoResponse)
}
UpdateRoomInfoResponse::UpdateRoomInfoResponse(const UpdateRoomInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRoomInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_room_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.updated_room_info_ = new ::lobby::RoomInfo(*from._impl_.updated_room_info_);
  }
  // @@protoc_insertion_point(copy_constructor:lobby.UpdateRoomInfoResponse)
}

inline void UpdateRoomInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_room_info_){nullptr}
  };
}

UpdateRoomInfoResponse::~UpdateRoomInfoResponse() {
  // @@protoc_insertion_point(destructor:lobby.UpdateRoomInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRoomInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.updated_room_info_;
}

void UpdateRoomInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRoomInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.UpdateRoomInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.updated_room_info_ != nullptr);
    _impl_.updated_room_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRoomInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lobby.RoomInfo updated_room_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_room_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateRoomInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.UpdateRoomInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .lobby.RoomInfo updated_room_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::updated_room_info(this),
        _Internal::updated_room_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.UpdateRoomInfoResponse)
  return target;
}

::size_t UpdateRoomInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.UpdateRoomInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lobby.RoomInfo updated_room_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_room_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRoomInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRoomInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRoomInfoResponse::GetClassData() const { return &_class_data_; }


void UpdateRoomInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRoomInfoResponse*>(&to_msg);
  auto& from = static_cast<const UpdateRoomInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.UpdateRoomInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_updated_room_info()->::lobby::RoomInfo::MergeFrom(
        from._internal_updated_room_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRoomInfoResponse::CopyFrom(const UpdateRoomInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.UpdateRoomInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomInfoResponse::IsInitialized() const {
  return true;
}

void UpdateRoomInfoResponse::InternalSwap(UpdateRoomInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.updated_room_info_, other->_impl_.updated_room_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRoomInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[6]);
}
// ===================================================================

class ConnectionInfo::_Internal {
 public:
};

ConnectionInfo::ConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lobby.ConnectionInfo)
}
ConnectionInfo::ConnectionInfo(const ConnectionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_) {}

    , decltype(_impl_.port_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:lobby.ConnectionInfo)
}

inline void ConnectionInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.host_) {}

    , decltype(_impl_.port_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionInfo::~ConnectionInfo() {
  // @@protoc_insertion_point(destructor:lobby.ConnectionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
}

void ConnectionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby.ConnectionInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby.ConnectionInfo.host"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectionInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby.ConnectionInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    const std::string& _s = this->_internal_host();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "lobby.ConnectionInfo.host");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby.ConnectionInfo)
  return target;
}

::size_t ConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby.ConnectionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_host());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionInfo::GetClassData() const { return &_class_data_; }


void ConnectionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionInfo*>(&to_msg);
  auto& from = static_cast<const ConnectionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby.ConnectionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionInfo::CopyFrom(const ConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby.ConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionInfo::IsInitialized() const {
  return true;
}

void ConnectionInfo::InternalSwap(ConnectionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_, lhs_arena,
                                       &other->_impl_.host_, rhs_arena);

  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_2eproto_getter, &descriptor_table_lobby_2eproto_once,
      file_level_metadata_lobby_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace lobby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lobby::RoomInfo*
Arena::CreateMaybeMessage< ::lobby::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::CreateRoomRequest*
Arena::CreateMaybeMessage< ::lobby::CreateRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::CreateRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::JoinRoomRequest*
Arena::CreateMaybeMessage< ::lobby::JoinRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::JoinRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::GetRoomListRequest*
Arena::CreateMaybeMessage< ::lobby::GetRoomListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::GetRoomListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::GetRoomListResponse*
Arena::CreateMaybeMessage< ::lobby::GetRoomListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::GetRoomListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::UpdateRoomInfoRequest*
Arena::CreateMaybeMessage< ::lobby::UpdateRoomInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::UpdateRoomInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::UpdateRoomInfoResponse*
Arena::CreateMaybeMessage< ::lobby::UpdateRoomInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::UpdateRoomInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby::ConnectionInfo*
Arena::CreateMaybeMessage< ::lobby::ConnectionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby::ConnectionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
